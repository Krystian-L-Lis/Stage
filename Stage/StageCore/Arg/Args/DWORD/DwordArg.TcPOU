<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="DwordArg" Id="{9659b537-4688-4285-be75-eafd6725a3aa}" SpecialFunc="None">
    <Declaration><![CDATA[(*
A broadcastable wrapper for a `DWORD` value. 
*)
FUNCTION_BLOCK DwordArg IMPLEMENTS I_DwordArg
VAR
	_val			: DWORD;
	_bMut			: BOOL := FALSE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="AllowMut" Id="{0cf9c6db-9ce8-47a7-bbc6-ae648d557fdb}">
      <Declaration><![CDATA[(*
Enables external modification of the internal value.
*)
METHOD AllowMut
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_bMut := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="BlockMut" Id="{f644c949-f11c-42c5-8ff6-fb2a912cef31}">
      <Declaration><![CDATA[(*
Disables external modification of the internal value.
*)
METHOD BlockMut

]]></Declaration>
      <Implementation>
        <ST><![CDATA[_bMut := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_Init" Id="{8603d428-c57e-4569-9ec2-b2ec8beaa7db}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
{attribute 'hide'}
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)   

	initVal		: DWORD;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_val := initVal;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Get" Id="{cc59ac16-520a-4813-9448-11df56543b41}">
      <Declaration><![CDATA[(*
Reads the internal value.
*)
PROPERTY Get : DWORD]]></Declaration>
      <Get Name="Get" Id="{51d7a5da-f031-44c4-96c5-7df19b5ffd36}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Get := _val;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="IsMut" Id="{50b98783-86da-419c-b72c-12661f9da5eb}">
      <Declaration><![CDATA[(*
Returns TRUE if the value is mutable.
*)
PROPERTY IsMut : BOOL]]></Declaration>
      <Get Name="Get" Id="{c33486f9-6bcd-4602-88a7-537f72d5ce2a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsMut := _bMut;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="OpSet" Id="{16e7d7ba-329c-43eb-9d90-fd60ed245a15}">
      <Declaration><![CDATA[(*
Directly modifies the internal value, bypassing any mutability restrictions.
*)
METHOD OpSet : I_Arg
VAR_INPUT
	newVal		: DWORD;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_val := newVal;
OpSet := THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Set" Id="{3d242843-c798-4d26-8320-230dbe6f25b3}">
      <Declaration><![CDATA[(*
Modifies the internal value.  
Returns:
- `Ok` - Upon successful modification.
- `Error` - If mutability is disabled.
*)
METHOD Set : Result
VAR_INPUT
	newVal		: DWORD;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _bMut THEN
	_val := newVal;
	Set := Ok;
ELSE
	Set := Error;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>