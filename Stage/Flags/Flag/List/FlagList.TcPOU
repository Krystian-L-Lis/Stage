<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FlagList" Id="{84fd6d3f-520f-4848-b407-784bffc8d20b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FlagList
VAR_GENERIC CONSTANT
	nMax				: UDINT(0..16#FFFFFFE) := 1;
END_VAR
IMPLEMENTS I_FlagList, I_MutFlagList
VAR
	_bIsReleased		: BOOL;
	_iFlag				: ARRAY[0..nMax] OF I_Flag;
	_nLen				: UDINT;
	_fbTagOwner			: Tags.TagOwner;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Get" Id="{721797f8-0200-4eef-8d35-45e719bf02e8}">
      <Folder Name="_GetByTag" Id="{6193d0bf-1256-476f-88c4-530ef932a828}" />
    </Folder>
    <Folder Name="Other" Id="{67e57392-fc45-4367-a9a6-527ba02f542c}" />
    <Folder Name="Push" Id="{561e62e7-0430-47bd-8533-fc21142222cd}">
      <Folder Name="_Extend" Id="{c9e830f8-39a0-4fbf-9d78-205778eacd67}" />
      <Folder Name="_Push" Id="{59c6016c-d055-4224-b867-8e31bddd7dc0}" />
    </Folder>
    <Method Name="_ExtendIfTagged" Id="{4fe1f4a2-09b1-450a-abc9-63dcd67f4d7e}" FolderPath="Push\_Extend\">
      <Declaration><![CDATA[METHOD PRIVATE _ExtendIfTagged : Results.Result
VAR_INPUT
	iFlagList			: I_FlagList;
END_VAR
VAR
	i					: UDINT;
	_iExtFlag			: I_Flag;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT iFlagList.IsReleased() THEN
	_ExtendIfTagged := Results.Err.NoMatch;
	RETURN;
END_IF

IF iFlagList.Length() + _nLen > nMax THEN
	_ExtendIfTagged := Results.Err.Ovf;
	RETURN;
END_IF

WHILE Results.IsOk(iFlagList.GetByPos(i, iFlag => _iExtFlag)) DO
	i := i + 1;
	_iExtFlag.Tag.Join(_fbTagOwner, _nLen);
	_iFlag[_nLen] := _iExtFlag;
	_nLen := _nLen + 1;
END_WHILE

_ExtendIfTagged := Results.Ok;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_ExtendIfUntagged" Id="{023135de-78b4-485d-b2c5-80ff90c8b4e4}" FolderPath="Push\_Extend\">
      <Declaration><![CDATA[METHOD PRIVATE _ExtendIfUntagged : Results.Result
VAR_INPUT
	iFlagList			: I_FlagList;
END_VAR
VAR
	i					: UDINT;
	j					: UDINT;

	_iExtFlag			: I_Flag;
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _nLen <> 0 THEN
	_ExtendIfUntagged := _ExtendIfUntaggedIfNotEmpty(iFlagList);
ELSE
	IF iFlagList.Cap() > nMax THEN
		_ExtendIfUntagged := Results.Err.Ovf;
		RETURN;
	END_IF	

	WHILE Results.IsOk(iFlagList.GetByPos(i, iFlag => _iExtFlag)) DO
		i := i + 1;
		_iExtFlag.Tag.Join(_fbTagOwner, _nLen);
		_iFlag[_nLen] := _iExtFlag;
		_nLen := _nLen + 1;
	END_WHILE
	
	_ExtendIfUntagged := Results.Ok;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="_ExtendIfUntaggedIfNotEmpty" Id="{0dfe5eee-fa1c-4f74-870e-831ac41c0821}" FolderPath="Push\_Extend\">
      <Declaration><![CDATA[METHOD PRIVATE _ExtendIfUntaggedIfNotEmpty : Results.Result
VAR_INPUT
	iFlagList			: I_FlagList;
END_VAR
VAR
	i					: UDINT;
	j					: UDINT;
	k					: UDINT;

	_iTemp				: ARRAY[0..nMax] OF I_Flag;

	_nExtLen			: UDINT;
	_iExtFlag			: I_Flag;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE Results.IsOk(iFlagList.GetByPos(i, iFlag => _iExtFlag)) DO
	
	FOR j := 0 TO _nLen - 1 DO
		IF _iFlag[j] = _iExtFlag THEN
			_iExtFlag := 0;
			EXIT;
		END_IF	
	END_FOR
	
	IF _iExtFlag <> 0 THEN
		_iTemp[k] := _iExtFlag;
		k := k + 1;
	END_IF
	
	i := i + 1;
END_WHILE

IF k = 0 THEN
	_ExtendIfUntaggedIfNotEmpty := Results.Ok;
	RETURN;
END_IF

FOR i := 0 TO k - 1 DO
	_iFlag[_nLen] := _iTemp[i];
	_nLen := _nLen + 1;
END_FOR

_ExtendIfUntaggedIfNotEmpty := Results.Ok;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_GetByTagIfTagged" Id="{0fc36883-a17d-4a84-b82c-02c864e5777c}" FolderPath="Get\_GetByTag\">
      <Declaration><![CDATA[METHOD PRIVATE _GetByTagIfTagged : Results.Result
VAR_INPUT
	iTag				: Tags.I_Tag;
END_VAR
VAR_OUTPUT
	iFlag				: I_Flag;
	nPos				: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iTag.Owner <> _fbTagOwner.Self THEN
	_GetByTagIfTagged := Results.None;
	RETURN;
END_IF

iFlag := _iFlag[iTag.Cache];
_GetByTagIfTagged := Results.Ok;
nPos := iTag.Cache;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_GetByTagIfUntagged" Id="{edb1b07a-5fb7-4e53-b30e-c8ffc1ad20c8}" FolderPath="Get\_GetByTag\">
      <Declaration><![CDATA[METHOD PRIVATE _GetByTagIfUntagged : Results.Result
VAR_INPUT
	iTag				: Tags.I_Tag;
END_VAR
VAR_OUTPUT
	iFlag				: I_Flag;
	nPos				: UDINT;
END_VAR
VAR
	i					: UDINT;
	cmp					: Tags.TagCmp;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO _nLen - 1 DO
	IF cmp.Set(iTag).Match(_iFlag[i].Tag).IsTrue() THEN
		_GetByTagIfUntagged := Results.Ok;
		RETURN;
	END_IF	
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="_PushIfTagged" Id="{f2afdd11-e41f-4efc-b7c9-3dcabc00e3e5}" FolderPath="Push\_Push\">
      <Declaration><![CDATA[METHOD PRIVATE _PushIfTagged : Results.Result
VAR_INPUT
	iFlag			: I_Flag;
END_VAR
VAR_OUTPUT
	nPos			: UDINT;
END_VAR
VAR
	_iTag			: Tags.I_Tag;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iFlag = 0 THEN
	_PushIfTagged := Results.Err.Itf0;
	RETURN;
END_IF

IF nMax < _nLen THEN
	_PushIfTagged := Results.Err.Ovf;
	RETURN;
END_IF

IF Results.IsErr(iFlag.Tag.Join(_fbTagOwner, _nLen), eCarry => _PushIfTagged) THEN
	RETURN;
END_IF

_iFlag[_nLen] := iFlag;
_nLen := _nLen + 1;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_PushIfUntagged" Id="{d01ae8ed-37b9-4324-83e3-b364b0770542}" FolderPath="Push\_Push\">
      <Declaration><![CDATA[METHOD PRIVATE _PushIfUntagged : Results.Result
VAR_INPUT
	iFlag			: I_Flag;
END_VAR
VAR_OUTPUT
	nPos			: UDINT;
END_VAR
VAR
	i				: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iFlag = 0 THEN
	_PushIfUntagged := Results.Err.Itf0;
	RETURN;
END_IF

IF nMax < _nLen THEN
	_PushIfUntagged := Results.Err.Ovf;
	RETURN;
END_IF

FOR i := 0 TO _nLen - 1 DO
	IF _iFlag[i] = iFlag THEN
		_PushIfUntagged := Results.None;
		RETURN;
	END_IF	
END_FOR

_iFlag[_nLen] := iFlag;
_nLen := _nLen + 1;
_PushIfUntagged := Results.Ok;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Cap" Id="{6bc324ed-286c-451b-a835-34dc4e273e85}" FolderPath="Other\">
      <Declaration><![CDATA[METHOD Cap : UDINT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Cap := nMax;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Extend" Id="{0717a46a-1949-40c0-999f-50b46b15a6e3}" FolderPath="Push\">
      <Declaration><![CDATA[METHOD Extend 			: Results.Result
VAR_INPUT
	fbFlagListExtend	: FlagListExtender;
END_VAR
VAR
	_iFlagList			: I_FlagList;
	_iThis				: I_FlagList := THIS^;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_iFlagList := fbFlagListExtend.List;

IF _iFlagList = 0 THEN
	Extend := Results.Err.Itf0;
	RETURN;
END_IF

IF _iFlagList = _iThis THEN
	Extend := Results.Err.ItfEq;
	RETURN;
END_IF


IF _bIsReleased THEN
	Extend :=_ExtendIfUntagged(_iFlagList);
ELSE
	Extend := _ExtendIfTagged(_iFlagList);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetByPos" Id="{f8e32890-9ddd-4daa-b35d-a45825c00f5b}" FolderPath="Get\">
      <Declaration><![CDATA[METHOD GetByPos : Results.Result
VAR_INPUT
	nPos		: UDINT;
END_VAR
VAR_OUTPUT
	iFlag		: I_Flag;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF nPos > nMax THEN
	GetByPos := Results.Err.Ovf;
	RETURN;
END_IF

iFlag := _iFlag[nPos];
IF iFlag <> 0 THEN
	GetByPos := Results.Ok;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetByTag" Id="{27a5ad81-4443-4726-b98a-65f64352d21a}" FolderPath="Get\">
      <Declaration><![CDATA[METHOD GetByTag : Results.Result;
VAR_INPUT
	iTag				: Tags.I_Tag;
END_VAR
VAR_OUTPUT
	iFlag				: I_Flag;
	nPos				: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _nLen = 0 THEN
	GetByTag := Results.None;
	RETURN;
END_IF

IF iTag = 0 THEN
	GetByTag := Results.Err.Itf0;
	RETURN;
END_IF

IF _bIsReleased THEN
	GetByTag := _GetByTagIfUntagged(iTag, iFlag => iFlag, nPos => nPos);
ELSE
	GetByTag := _GetByTagIfTagged(iTag, iFlag => iFlag, nPos => nPos);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetExtender" Id="{3ab04461-4de8-442e-97af-edd88217e0a3}" FolderPath="Get\">
      <Declaration><![CDATA[METHOD GetExtender : FlagListExtender
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetExtender.List := THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsReleased" Id="{3b4eee9d-8fe8-49f6-b2a5-700b35cd90d8}" FolderPath="Other\">
      <Declaration><![CDATA[METHOD IsReleased : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsReleased := _bIsReleased;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Length" Id="{fd3b8226-fbad-42e7-8aab-dc6292773476}" FolderPath="Other\">
      <Declaration><![CDATA[METHOD Length : UDINT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Length := _nLen;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Push" Id="{a5c44e22-6a60-4b8a-9704-ad690685000d}" FolderPath="Push\">
      <Declaration><![CDATA[METHOD Push : Results.Result
VAR_INPUT
	iFlag			: I_Flag;
END_VAR
VAR_OUTPUT
	nPos			: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _bIsReleased THEN
	Push :=_PushIfuntagged(iFlag, nPos => nPos);
ELSE
	Push := _PushIfTagged(iFlag, nPos => nPos);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Release" Id="{4f00940c-2baa-4ecf-b0fd-346a2782d1ce}" FolderPath="Get\">
      <Declaration><![CDATA[METHOD Release 				: FlagListExtender;
VAR
	i						: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _bIsReleased THEN
	FOR i := 0 TO _nLen - 1 DO
		_iFlag[i].Tag.Leave(_fbTagOwner);
	END_FOR
	
	_bIsReleased := TRUE;
END_IF

Release.List := THIS^;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>