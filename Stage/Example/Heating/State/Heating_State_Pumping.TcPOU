<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="Heating_State_Pumping" Id="{195b0e92-992c-4b31-a0dd-1b5af906cbe2}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Heating_State_Pumping EXTENDS Heating_State
VAR CONSTANT
	ERROR_STEP		: USINT := 8;
	OK_STEP			: USINT := 7;
	READY_STEP		: USINT := 9;
END_VAR
VAR
	_nStep		: USINT;
	_tonTimeout	: TON;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="CanActivate" Id="{f4e469e0-3329-4636-829f-7a5f4c27939b}">
      <Declaration><![CDATA[METHOD CanActivate : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CanActivate :=  _ctx.state.iMgr.Current = _ctx.state.iEnable;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnEntry" Id="{dc76118f-322c-4257-9d92-65205e9e8301}">
      <Declaration><![CDATA[METHOD OnEntry
VAR
	strb			: Strb;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_ctx.hmi.sStatusText := strb.Append('Heating enabled: Pumping to room ')
							.Append(UDINT_TO_STRING(_ctx.priv.iActiveRoom.Id))
							.Append('...')
							.Read();
							
_ctx.hmi.nStatusColor := COL.BLACK.Raw;

_ctx.hmi.sButtonText := 'Press to DISABLE!';
_ctx.hmi.nButtonColor := COL.BLACK.Raw;

_ctx.io.out.bBurner := FALSE;
_ctx.io.out.bPump := FALSE;

_ctx.priv.iOnPause.Emit();

_nStep := 0;
_tonTimeout(IN := FALSE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{bbc510df-aef5-44dc-9d86-57811004103f}">
      <Declaration><![CDATA[METHOD OnExecute
VAR
	strb		: Strb;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_tonTimeout(IN := TRUE);

IF _ctx.priv.iActiveRoom = 0 THEN
	_nStep := ERROR_STEP;
	_ctx.hmi.sErrorText := 'Pumping -Incorrect iActiveRoom value!';
ELSIF _tonTimeout.Q THEN
	_nStep := OK_STEP;
	_ctx.priv.iActiveRoom.TriggerFault(	strb.Append('Timeout at step ')
												.Append(USINT_TO_STRING(_nStep))
												.Append('!')
												.Read());
ELSIF _ctx.priv.iActiveRoom.Active THEN
	_nStep := 6;
END_IF

CASE _nStep OF
	0:
		_ctx.priv.iActiveRoom.Open();
		_nStep := 1;
		
	1:
		IF _ctx.priv.iActiveRoom.IsOpen THEN
			_nStep := 2;
		END_IF
	2:	
		_ctx.io.out.bBurner := TRUE;
		_ctx.io.out.bPump := TRUE;
		_nStep := 3;
		
	3:
		_tonTimeout(IN := FALSE);
		IF _ctx.priv.iActiveRoom.IsReady THEN
			_nStep := 4;
		END_IF
	4:	
		_ctx.io.out.bBurner := FALSE;
		_ctx.io.out.bPump := FALSE;
		_nStep := 5;
	5:
		_ctx.priv.iActiveRoom.Close();
		_nStep := 6;
	6:
		IF _ctx.priv.iActiveRoom.IsClosed THEN
			_nStep := 7;
		END_IF
	7:
		_ctx.state.iMgr.Request(_ctx.state.iEnable);
		_nStep := READY_STEP;
	ERROR_STEP:
		_ctx.state.iMgr.Request(_ctx.state.iFault);
		_nStep := READY_STEP;
END_CASE]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>