<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="ReceptionRoom" Id="{da0c2305-b67f-4452-8260-f7daed97569d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ReceptionRoom IMPLEMENTS I_Execute, I_Init
VAR CONSTANT
	STATE_CAP		: UDINT := 5;
END_VAR
VAR_INPUT
	rTemperature	: LREAL := 20.0 + Random();
	
	bInletValveIsClosed	: BOOL;
	bInletValveIsOpen	: BOOL;
	
	bOutletValveIsClosed: BOOL;
	bOutletValveIsOpen	: BOOL;
END_VAR
VAR_OUTPUT
	bInletValve		: BOOL;
	bOutletValve	: BOOL;
END_VAR
VAR	
	
	// Entity declaration, context and execute
	_this			: Entity;
	_ctx			: Room_Ctx;
	_tag			: Tag(CONCAT('Room_', UDINT_TO_STRING(_ctx.Id)));
	_compTag		: Comp(_tag, _this);
	_exe			: Execute(THIS^);
	_init			: Init(THIS^);
	
	// UI Logic
	_uiLogic		: Room_UiLogic(_ctx);
	
	// Receiver
	_onSystemEvent	: Room_OnSystemEvent(_ctx);
	
	// Signal
	_requestEvent		: Signal;
	_compRequestEvent	: Comp(_requestEvent, _this);
	_proxRequestEvent	: SignalProxy(_requestEvent, _ctx.priv.iRequestEvent);
	
	
	// State Manager
	_smgr			: StateManager<STATE_CAP>(_this);
	_proxSmgr		: StateManagerProxy(_smgr, _ctx.state.iMgr);
	
	// States
	_disable		: Room_State_Disabled(_this, _ctx);
	_proxDisable	: StateProxy(_disable, _ctx.state.iDisable);
	
	_fault			: Room_State_Fault(_this,_ctx);
	_proxFault		: StateProxy(_fault, _ctx.state.iFault);	
	
	_idle			: Room_State_Idle(_this,_ctx);
	_proxIdle		: StateProxy(_idle, _ctx.state.iIdle);
	
	_lowTemperature	: Room_State_LowTemperature(_this, _ctx, rTemperature);
	
	// Simulation
	_inletSim		: ValveSim(bInletValve, bInletValveIsOpen, bInletValveIsClosed);
	_outletSim		: ValveSim(bOutletValve, bOutletValveIsOpen, bOutletValveIsClosed);
		
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Execute" Id="{cebc7a85-aeea-43df-bbe1-0c63df1252f3}">
      <Declaration><![CDATA[METHOD Execute
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// HMI

_ctx.hmi.sData := '';

// Inputs
_ctx.io.bValvesOpen := bInletValveIsOpen AND bOutletValveIsOpen;
_ctx.io.bValvesClosed := bInletValveIsClosed AND bOutletValveIsClosed;

// Outputs
bInletValve := _ctx.io.bOpenValves;
bOutletValve := _ctx.io.bOpenValves;

// Simulation
IF NOT sim.bTick THEN
	RETURN;
END_IF

IF bInletValve AND bOutletValve THEN
	sim.rSystemTemperature := sim.rSystemTemperature + sim.param.rSystemTemperatureDropPerHeater * Random();
	rTemperature := rTemperature + sim.param.rRoomTemperatureRisePerHeater * Random();
END_IF

rTemperature := rTemperature + sim.param.rRoomTemperaturePassiveDrop * Random();

IF rTemperature < 0 THEN
	rTemperature := 0;
ELSIF rTemperature > 100 THEN
	rTemperature := 100;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{a63a8c81-748c-4af1-a3a2-7b54920707cf}">
      <Declaration><![CDATA[METHOD Init
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_smgr.Request(_idle);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>