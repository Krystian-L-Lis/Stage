<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="TempRoom" Id="{8c54ee22-59a8-49d2-b8b3-99fe50b66d76}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TempRoom IMPLEMENTS I_Execute, I_Init
VAR CONSTANT
	STATE_CAP		: UDINT := 5;
END_VAR
VAR
	_this			: Entity;
	_ctx			: Room_Ctx;
	_room			: RoomInterface(_ctx);
	_tag			: Tag(CONCAT('Room_', UDINT_TO_STRING(_room.Id)));
	_compTag		: Comp(_tag, _this);
	_init			: Init(THIS^);
	_exe			: Execute(THIS^);
	
	_uiLogic		: Room_UiLogic(_ctx);
	
	_systemReceiver	: Room_SystemReceiver(_ctx);
	
	_smgr			: StateManager<STATE_CAP>(_this);
	_proxSmgr		: StateManagerProxy(_smgr, _ctx.state.iMgr);
	
	_disable		: Room_State_Disabled(_this, _ctx);
	_proxDisable	: StateProxy(_disable, _ctx.state.iDisable);
	
	_fault			: Room_State_Fault(_this,_ctx);
	_proxFault		: StateProxy(_fault, _ctx.state.iFault);	
	
	_idle			: Room_State_Idle(_this,_ctx);
	_proxIdle		: StateProxy(_idle, _ctx.state.iIdle);	
	
	_systemOff		: Room_State_SystemOff(_this,_ctx);
	_proxSystemOff	: StateProxy(_systemOff, _ctx.state.iSystemOff);
END_VAR

	// Here add custom components

VAR PERSISTENT
	_settings				: Room_Settings_TemperatureSettings;
END_VAR
VAR_INPUT
	rTemperature			: REAL;
	
	bInletValveIsOpen		: BOOL;
	bInletValveIsClosed		: BOOL;
	
	bOutletValveIsOpen		: BOOL;
	bOutletValveIsClosed	: BOOL;
END_VAR

VAR_OUTPUT
	bInletValve				: BOOL;
	bOutletValve			: BOOL;
END_VAR
VAR
	_tempDemand		: Room_State_DemandTemperature(_this, _ctx, _settings, rTemperature);
	
	_simInlet		: ValveSim;
	_simOutlet		: ValveSim;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Execute" Id="{3c017531-be58-4304-ab67-12712a6adef1}">
      <Declaration><![CDATA[METHOD Execute
VAR
	i			: UDINT;
	_rTempSum	: REAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_ctx.priv.bClosed := bInletValveIsClosed AND bOutletValveIsClosed;
_ctx.priv.bOpen := bInletValveIsOpen AND bOutletValveIsOpen;

bInletValve :=  _ctx.io.bOpenValves;
bOutletValve :=  _ctx.io.bOpenValves;

_ctx.hmi.sData := '';

// SIMULATION

_simInlet(bInput := bInletValve,
			bFault := sim.param.bToggleValveFault,
			bIsOpen := bInletValveIsOpen,
			bIsClosed := bInletValveIsClosed);
_simOutlet(bInput := bOutletValve,
			bFault := sim.param.bToggleValveFault,
			bIsOpen := bOutletValveIsOpen,
			bIsClosed := bOutletValveIsClosed);

IF NOT sim.bTick THEN
	RETURN;
END_IF

IF bInletValve AND bOutletValve THEN
	sim.rSystemTemperature := sim.rSystemTemperature + sim.param.rSystemTemperatureDropPerHeater;
	rTemperature := rTemperature + sim.param.rRoomTemperatureRisePerHeater;
END_IF

rTemperature := rTemperature + sim.param.rRoomTemperaturePassiveDrop;

IF rTemperature < 0 THEN
	rTemperature := 0;
ELSIF rTemperature > 100 THEN
	rTemperature := 100;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{33bf4a79-165a-415c-a92f-3cee79c69761}">
      <Declaration><![CDATA[METHOD Init
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_smgr.Request(_idle);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>