<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="TempRoomWithMultipleSensors" Id="{1c1f35f1-e452-44bd-ba56-2c114335a3d0}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TempRoomWithMultipleSensors
VAR_GENERIC CONSTANT
	SENSOR_CAP		: UDINT := 4;
END_VAR
IMPLEMENTS I_Execute, I_Init
VAR CONSTANT
	STATE_CAP		: UDINT := 5;
END_VAR
VAR
	_this			: Entity;
	_ctx			: Room_Ctx;
	_room			: RoomInterface(_ctx);
	_tag			: Tag(CONCAT('Room_', UDINT_TO_STRING(_room.Id)));
	_compTag		: Comp(_tag, _this);
	_init			: Init(THIS^);
	_exe			: Execute(THIS^);
	
	_uiLogic		: Room_UiLogic(_ctx);
	
	_systemReceiver	: Room_SystemReceiver(_ctx);
	
	_smgr			: StateManager<STATE_CAP>(_this);
	_proxSmgr		: StateManagerProxy(_smgr, _ctx.state.iMgr);
	
	_disable		: Room_State_Disabled(_this, _ctx);
	_proxDisable	: StateProxy(_disable, _ctx.state.iDisable);
	
	_fault			: Room_State_Fault(_this,_ctx);
	_proxFault		: StateProxy(_fault, _ctx.state.iFault);	
	
	_idle			: Room_State_Idle(_this,_ctx);
	_proxIdle		: StateProxy(_idle, _ctx.state.iIdle);	
	
	_systemOff		: Room_State_SystemOff(_this,_ctx);
	_proxSystemOff	: StateProxy(_systemOff, _ctx.state.iSystemOff);
END_VAR

	// Here add custom components

VAR PERSISTENT
	_settings				: Room_Settings_TemperatureSettings;
END_VAR
VAR_INPUT
	rTemperature			: ARRAY[1..SENSOR_CAP] OF REAL;
	
	bInletValveIsOpen		: BOOL;
	bInletValveIsClosed		: BOOL;
	
	bOutletValveIsOpen		: BOOL;
	bOutletValveIsClosed	: BOOL;
END_VAR
VAR
	_rTemperature			: REAL;
END_VAR
VAR_OUTPUT
	bInletValve				: BOOL;
	bOutletValve			: BOOL;
END_VAR
VAR
	_tempDemand		: Room_State_DemandTemperature(_this, _ctx, _settings, _rTemperature);
	
	_simInlet		: ValveSim;
	_simOutlet		: ValveSim;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Execute" Id="{227dadc6-9c24-4539-890a-d7ee861363ab}">
      <Declaration><![CDATA[METHOD Execute
VAR
	i			: UDINT;
	_rTempSum	: REAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_ctx.priv.bClosed := bInletValveIsClosed AND bOutletValveIsClosed;
_ctx.priv.bOpen := bInletValveIsOpen AND bOutletValveIsOpen;

bInletValve :=  _ctx.io.bOpenValves;
bOutletValve :=  _ctx.io.bOpenValves;

FOR i := 1 TO SENSOR_CAP DO
	_rTempSum := rTemperature[i] + _rTempSum;
END_FOR

_rTemperature := _rTempSum/UDINT_TO_REAL(SENSOR_CAP);

_ctx.hmi.sData := '';

_simInlet(bInput := bInletValve,
			bFault := sim.param.bToggleValveFault,
			bIsOpen := bInletValveIsOpen,
			bIsClosed := bInletValveIsClosed);
_simOutlet(bInput := bOutletValve,
			bFault := sim.param.bToggleValveFault,
			bIsOpen := bOutletValveIsOpen,
			bIsClosed := bOutletValveIsClosed);

IF NOT sim.bTick THEN
	RETURN;
END_IF

IF bInletValve AND bOutletValve THEN
	sim.rSystemTemperature := sim.rSystemTemperature + sim.param.rSystemTemperatureDropPerHeater;
	
	FOR i := 1 TO SENSOR_CAP DO
		rTemperature[i] := rTemperature[i] + sim.param.rRoomTemperatureRisePerHeater + Random();
	END_FOR
END_IF

FOR i := 1 TO SENSOR_CAP DO
	rTemperature[i] := rTemperature[i] + sim.param.rRoomTemperaturePassiveDrop + Random();
	
	IF rTemperature[i] < 0 THEN
		rTemperature[i] := 0;
	ELSIF rTemperature[i] > 100 THEN
		rTemperature[i] := 100;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{b390b409-07d8-4077-904f-545a73e6c2aa}">
      <Declaration><![CDATA[METHOD Init
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_smgr.Request(_idle);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>