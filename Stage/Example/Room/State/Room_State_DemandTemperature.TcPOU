<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="Room_State_DemandTemperature" Id="{c98dfd46-a1dc-427b-9523-1ac85e9186a3}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Room_State_DemandTemperature EXTENDS Room_State IMPLEMENTS I_Execute, I_Init
VAR
	_init					: Init(THIS^);
	_exe					: Execute(THIS^);
	_refTemperatureSettings	: REFERENCE TO Room_Settings_TemperatureSettings;
	_refTemperature			: REFERENCE TO REAL;
	
	_requestEvent				: Signal;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="CanActivate" Id="{51bcc432-de37-45d3-9cd7-d6044b188fd2}">
      <Declaration><![CDATA[METHOD CanActivate : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CanActivate := _ctx.state.iMgr.Current = _ctx.state.iIdle;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Execute" Id="{8b5d189f-4b23-4430-818b-71b05464abf1}">
      <Declaration><![CDATA[METHOD Execute
VAR
	_iSelf		: I_State := THIS^;
	_strb		: strb;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_strb.Set(_ctx.hmi.sData)
		.Append(' ')
		.Append(Strf.Fmt('%0.2f', F_Real(_refTemperature)))
		.Append(' degC');

_ctx.hmi.sData := _strb.Read();



IF _ctx.state.iMgr.Current <> _ctx.state.iIdle THEN
	RETURN;
END_IF

IF _ctx.state.iMgr.Current = _iSelf THEN
	RETURN;
END_IF

IF _refTemperature < _refTemperatureSettings.rLow THEN
	_ctx.state.iMgr.Request(THIS^);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_Init" Id="{3568dba0-258f-4d49-a454-b138e478eb64}">
      <Declaration><![CDATA[(*FB_Init is always available implicitly and it is used primarily for initialization.
The return value is not evaluated. For a specific influence, you can also declare the
methods explicitly and provide additional code there with the standard initialization
code. You can evaluate the return value.*)
METHOD FB_Init : BOOL
VAR_INPUT
	(* TRUE: the retain variables are initialized (reset warm / reset cold)*)
	bInitRetains	: BOOL;
	(* TRUE: the instance will be copied to the copy code afterward (online change)*)
	bInCopyCode	: BOOL;
	iEntity			: Core.I_Entity;
	ctx			: REFERENCE TO Room_Ctx;
	refSettings		: REFERENCE TO Room_Settings_TemperatureSettings;
	refTemperature	: REFERENCE TO REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_refTemperature REF= refTemperature;
_refTemperatureSettings REF= refSettings;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{62e3aadc-34b8-4f90-934a-bae9858dcaa8}">
      <Declaration><![CDATA[METHOD Init
VAR
	i			: Iter(1);
	_iEntity	: I_Entity;
	_iRec		: I_Receiver;
	_r			: Result;
	strb		: Strb;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE IsOk(GetEntity(i.Next(), iEntity => _iEntity)) DO
	IF IsNone(GetTagOpt(_iEntity, 'Heating')) THEN
		CONTINUE;
	END_IF
	
	IF IsOk(GetReceiver(_iEntity, '*._onRequest', iRec => _iRec)) THEN
		IF IsErr(_requestEvent.Pair(_iRec), nOut => _r) THEN
			DebugMsg(_iRec, strb.Append('Cannot pair _onRequest with this receiver! Error code: ').Append(TO_STRING(_r)).Read());
		END_IF
		
		RETURN;
	END_IF
END_WHILE

DebugMsg(THIS^, strb.Append('Cannot pair _requestEvent with a ').Append('_onRequest').Append('!').Read());
DebugMsg(_iEntity, strb.Append('_onRequest').Append(' not found!').Read());

]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnEntry" Id="{aa027ac0-d2d2-41a0-a2a1-be232fcb4334}">
      <Declaration><![CDATA[METHOD OnEntry
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_ctx.io.bOpenValves := FALSE;

_ctx.priv.bActive := TRUE;
_ctx.priv.bReady := FALSE;

_ctx.hmi.sStatusText := 'Heating ON: Low Temperature...';
_ctx.hmi.nStatusColor := COL.BLACK.Raw;

_ctx.hmi.bHideReset := TRUE;

_requestEvent.Emit(_ctx.priv.iThisRoom);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{cb6312a9-8ff8-4ec6-9559-0b72ff764e07}">
      <Declaration><![CDATA[METHOD OnExecute
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _ctx.hmi.bDisable THEN
	_ctx.state.iMgr.Request(_ctx.state.iDisable);
ELSIF _refTemperature >= _refTemperatureSettings.rHigh THEN
	_ctx.priv.bReady := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>