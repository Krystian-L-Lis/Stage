<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="ArgQueue" Id="{c76e1546-2227-4293-8d71-24ba2b1f9980}" SpecialFunc="None">
    <Declaration><![CDATA[(*
A circular queue implementation for managing `I_Arg`.  
*)
FUNCTION_BLOCK ArgQueue
VAR_GENERIC CONSTANT
	nCap		: UDINT := 100;
END_VAR

IMPLEMENTS I_MutArgQueue

VAR
	_list		: ArgList<nCap>;
	_nLen		: UDINT := 0;
	_nHead		: UDINT := 1;
	_nTail		: UDINT := 1;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Proxy" Id="{9f39ca87-734b-4ce2-a064-6cb3a1e15ca4}" />
    <Method Name="Clear" Id="{de26b2be-362d-4495-b24f-d07023138547}">
      <Declaration><![CDATA[(*
Clears the queue.
*)
METHOD Clear
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_nHead := 1;
_nTail := 1;
_nLen := 0;
_list.Set(0, 1);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Head" Id="{c9aced8c-5615-4602-a8c9-d2cca06beb56}">
      <Declaration><![CDATA[(*
Returns the current head index of the queue, indicating the next position for insertion.
*)
PROPERTY Head : UDINT]]></Declaration>
      <Get Name="Get" Id="{e1f4e3bb-f456-4b54-a664-6226a1648088}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Head := _nHead;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Length" Id="{138194cb-0617-4188-9db7-14d43055e764}">
      <Declaration><![CDATA[PROPERTY Length : UDINT]]></Declaration>
      <Get Name="Get" Id="{c65e8145-303d-4803-99d0-e1f5bad90830}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Length := _nLen;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="List" Id="{cf73eedb-24ba-4099-8ac4-bd0f99e7e007}">
      <Declaration><![CDATA[(*
Provides access to the underlying list structure that holds the queue's argument objects.
*)
PROPERTY List : I_ArgList]]></Declaration>
      <Get Name="Get" Id="{fcb1b69f-2ae2-4e8b-8036-3051766ec0a1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[List := _list;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="MutProxy" Id="{df8ba48c-7672-4a55-b0be-3b5f9a4d9dff}" FolderPath="Proxy\">
      <Declaration><![CDATA[(*
Allows initializing an external interface variable with an interface pointer to this instance within declaration block.
Example:
iQueue: I_MutArgQueue;
queue: ArgQueue := (MutProxy := iQueue);
Result: iQueue <> 0 
*)
PROPERTY MutProxy : REFERENCE TO I_MutArgQueue]]></Declaration>
      <Set Name="Set" Id="{e645097b-951f-44f1-9c61-03dc6b075533}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MutProxy := THIS^;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Pop" Id="{ebbd8206-4440-4673-b31a-c80b5ef2f1c1}">
      <Declaration><![CDATA[(*
Retrieves and removes the next argument from the queue.  
Advances the tail pointer, ensuring cyclic operation within the queue's capacity.
Returns:
- Ok - Returns `I_Arg`.
- Err.NotFound - Returns null, queue empty.
- Check `I_ArgList.Get` for more results.
*)
METHOD Pop : Result
VAR_INPUT
	iOut	: REFERENCE TO I_Arg;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _nLen = 0 THEN
	Pop := Err.NotFound;
	RETURN;
END_IF;

IF IsOk(_list.Get(_nHead, iOut), nOut => Pop) THEN
	_nHead := (_nHead MOD nCap) + 1;
	_nLen := _nLen - 1;
	Pop := Ok;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Proxy" Id="{0a9d7853-91a6-46b9-8229-824366fef474}" FolderPath="Proxy\">
      <Declaration><![CDATA[(*
Allows initializing an external interface variable with an interface pointer to this instance within declaration block.
Example:
iQueue: I_ArgQueue;
queue: ArgQueue := (Proxy := iQueue);
Result: iQueue <> 0 
*)
PROPERTY Proxy : REFERENCE TO I_ArgQueue]]></Declaration>
      <Set Name="Set" Id="{3ef5d859-90d8-4433-81d3-8c4a83e9ef75}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Proxy := THIS^;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Push" Id="{7a6a861d-ce7d-4b8e-83b1-463d9bd37168}">
      <Declaration><![CDATA[(*
Adds a new argument to the queue.  
Advances the head pointer while maintaining a cyclic structure, and returns an overflow error if the queue is full.
Returns:
- Ok - Successful insertion
- Err.Ovf - Returns null, the queue is full.
- Check `I_ArgList.Set` for more results.
*)
METHOD Push : Result
VAR_INPUT
	iIn		: I_Arg;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _nLen = nCap THEN
	Push := Err.Ovf;
	RETURN;
END_IF;

IF IsOk(_list.Set(iIn, _nTail), nOut => Push) THEN
	_nTail := (_nTail MOD nCap) + 1;
	_nLen := _nLen + 1;
	Push := Ok;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Tail" Id="{86561c9d-d0a1-4b85-b773-d6ff1230d5fb}">
      <Declaration><![CDATA[(*
Returns the current tail index of the queue, indicating the next position for retrieval.
*)
PROPERTY Tail : UDINT]]></Declaration>
      <Get Name="Get" Id="{97904e90-29ab-41d0-962b-7b170142aeb0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Tail := _nTail;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>