<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="SignalList" Id="{12e16f0f-20a9-4699-9324-4f4f951b9079}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FINAL SignalList
VAR_GENERIC CONSTANT
	nMax				: UDINT(0..16#FFFFFFE) := 1;
END_VAR
IMPLEMENTS I_SignalList, I_MutSignalList
VAR
	_bIsReleased		: BOOL;
	_iSignal			: ARRAY[0..nMax] OF I_Signal;
	_nLen				: UDINT;
	_fbTagOwner			: Tags.TagOwner;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Get" Id="{f3419b69-ecf7-44ee-8dce-d4243463f79c}">
      <Folder Name="_GetByTag" Id="{6e27ddf5-f421-4b9d-9ce5-4c1c113297e8}" />
    </Folder>
    <Folder Name="Other" Id="{31e209e9-bfb1-4a6e-8a2c-72a1843b5f0b}" />
    <Folder Name="Push" Id="{99aeb9dc-3c7f-4e6f-a9aa-e9f4775a62dd}">
      <Folder Name="_Extend" Id="{9bba79c9-b821-4b19-8519-c5f9f4fbf41d}" />
      <Folder Name="_Push" Id="{88f3d858-6e8c-4b0d-b71a-6b0a774d9682}" />
    </Folder>
    <Method Name="_ExtendIfTagged" Id="{0dd2de9d-0a20-4dbf-88ef-5ee1201aa454}" FolderPath="Push\_Extend\">
      <Declaration><![CDATA[METHOD PRIVATE _ExtendIfTagged : Results.Result
VAR_INPUT
	iSignalList			: I_SignalList;
END_VAR
VAR
	i					: UDINT;
	_iExtSignal			: I_Signal;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT iSignalList.IsReleased() THEN
	_ExtendIfTagged := Results.Err.NoMatch;
	RETURN;
END_IF

IF iSignalList.Length() + _nLen > nMax THEN
	_ExtendIfTagged := Results.Err.Ovf;
	RETURN;
END_IF

WHILE Results.IsOk(iSignalList.GetByPos(i, iSignal => _iExtSignal)) DO
	i := i + 1;
	_iExtSignal.Tag.Join(_fbTagOwner, _nLen);
	_iSignal[_nLen] := _iExtSignal;
	_nLen := _nLen + 1;
END_WHILE

_ExtendIfTagged := Results.Ok;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_ExtendIfUntagged" Id="{5d9131b9-8d09-435d-aaef-d5bcd4795d89}" FolderPath="Push\_Extend\">
      <Declaration><![CDATA[METHOD PRIVATE _ExtendIfUntagged : Results.Result
VAR_INPUT
	iSignalList			: I_SignalList;
END_VAR
VAR
	i					: UDINT;
	j					: UDINT;

	_iExtSignal			: I_Signal;
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _nLen <> 0 THEN
	_ExtendIfUntagged := _ExtendIfUntaggedIfNotEmpty(iSignalList);
ELSE
	IF iSignalList.Cap() > nMax THEN
		_ExtendIfUntagged := Results.Err.Ovf;
		RETURN;
	END_IF	

	WHILE Results.IsOk(iSignalList.GetByPos(i, iSignal => _iExtSignal)) DO
		i := i + 1;
		_iExtSignal.Tag.Join(_fbTagOwner, _nLen);
		_iSignal[_nLen] := _iExtSignal;
		_nLen := _nLen + 1;
	END_WHILE
	
	_ExtendIfUntagged := Results.Ok;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="_ExtendIfUntaggedIfNotEmpty" Id="{94547908-fce0-4310-84b6-eede003ec731}" FolderPath="Push\_Extend\">
      <Declaration><![CDATA[METHOD PRIVATE _ExtendIfUntaggedIfNotEmpty : Results.Result
VAR_INPUT
	iSignalList			: I_SignalList;
END_VAR
VAR
	i					: UDINT;
	j					: UDINT;
	k					: UDINT;

	_iTemp				: ARRAY[0..nMax] OF I_Signal;

	_iExtSignal			: I_Signal;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE Results.IsOk(iSignalList.GetByPos(i, iSignal => _iExtSignal)) DO
	
	FOR j := 0 TO _nLen - 1 DO
		IF _iSignal[j] = _iExtSignal THEN
			_iExtSignal := 0;
			EXIT;
		END_IF	
	END_FOR
	
	IF _iExtSignal <> 0 THEN
		_iTemp[k] := _iExtSignal;
		k := k + 1;
	END_IF
	
	i := i + 1;
END_WHILE

IF k = 0 THEN
	_ExtendIfUntaggedIfNotEmpty := Results.Ok;
	RETURN;
END_IF

FOR i := 0 TO k - 1 DO
	_iSignal[_nLen] := _iTemp[i];
	_nLen := _nLen + 1;
END_FOR

_ExtendIfUntaggedIfNotEmpty := Results.Ok;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_GetByTagIfTagged" Id="{e65b48b5-514f-4909-9d97-83738d565b9a}" FolderPath="Get\_GetByTag\">
      <Declaration><![CDATA[METHOD PRIVATE _GetByTagIfTagged : Results.Result
VAR_INPUT
	iTag				: Tags.I_Tag;
END_VAR
VAR_OUTPUT
	iSignal				: I_Signal;
	nPos				: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iTag.Owner <> _fbTagOwner.Self THEN
	_GetByTagIfTagged := Results.None;
	RETURN;
END_IF

iSignal := _iSignal[iTag.Cache];
_GetByTagIfTagged := Results.Ok;
nPos := iTag.Cache;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_GetByTagIfUntagged" Id="{769cc9e3-5f53-4589-a4d4-dd5b75b91029}" FolderPath="Get\_GetByTag\">
      <Declaration><![CDATA[METHOD PRIVATE _GetByTagIfUntagged : Results.Result
VAR_INPUT
	iTag				: Tags.I_Tag;
END_VAR
VAR_OUTPUT
	iSignal				: I_Signal;
	nPos				: UDINT;
END_VAR
VAR
	i					: UDINT;
	cmp					: Tags.TagCmp;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO _nLen - 1 DO
	IF cmp.Set(iTag).Match(_iSignal[i].Tag).IsOk() THEN
		_GetByTagIfUntagged := Results.Ok;
		RETURN;
	END_IF	
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="_PushIfTagged" Id="{dcb48d0d-439d-4c79-9d83-0ce6682be61b}" FolderPath="Push\_Push\">
      <Declaration><![CDATA[METHOD PRIVATE _PushIfTagged : Results.Result
VAR_INPUT
	iSignal			: I_Signal;
END_VAR
VAR_OUTPUT
	nPos			: UDINT;
END_VAR
VAR
	_iTag			: Tags.I_Tag;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iSignal = 0 THEN
	_PushIfTagged := Results.Err.Itf0;
	RETURN;
END_IF

IF nMax < _nLen THEN
	_PushIfTagged := Results.Err.Ovf;
	RETURN;
END_IF

IF Results.IsErr(iSignal.Tag.Join(_fbTagOwner, _nLen), eCarry => _PushIfTagged) THEN
	RETURN;
END_IF

_iSignal[_nLen] := iSignal;
_nLen := _nLen + 1;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_PushIfUntagged" Id="{34055460-0359-4caf-8044-63ffda695008}" FolderPath="Push\_Push\">
      <Declaration><![CDATA[METHOD PRIVATE _PushIfUntagged : Results.Result
VAR_INPUT
	iSignal			: I_Signal;
END_VAR
VAR_OUTPUT
	nPos			: UDINT;
END_VAR
VAR
	i				: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iSignal = 0 THEN
	_PushIfUntagged := Results.Err.Itf0;
	RETURN;
END_IF

IF nMax < _nLen THEN
	_PushIfUntagged := Results.Err.Ovf;
	RETURN;
END_IF

FOR i := 0 TO _nLen - 1 DO
	IF _iSignal[i] = iSignal THEN
		_PushIfUntagged := Results.None;
		RETURN;
	END_IF	
END_FOR

_iSignal[_nLen] := iSignal;
_nLen := _nLen + 1;
_PushIfUntagged := Results.Ok;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Cap" Id="{8f072dba-e894-4e10-ae67-91a7122cf680}" FolderPath="Other\">
      <Declaration><![CDATA[METHOD Cap : UDINT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Cap := nMax;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Extend" Id="{d75a73d8-e3c5-4de7-8452-03f432a93d53}" FolderPath="Push\">
      <Declaration><![CDATA[METHOD Extend 			: Results.Result
VAR_INPUT
	fbSignalListExtend	: SignalListExtender;
END_VAR
VAR
	_iSignalList		: I_SignalList;
	_iThis				: I_SignalList := THIS^;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_iSignalList := fbSignalListExtend.List;

IF _iSignalList = 0 THEN
	Extend := Results.Err.Itf0;
	RETURN;
END_IF

IF _iSignalList = _iThis THEN
	Extend := Results.Err.ItfEq;
	RETURN;
END_IF


IF _bIsReleased THEN
	Extend :=_ExtendIfUntagged(_iSignalList);
ELSE
	Extend := _ExtendIfTagged(_iSignalList);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetByPos" Id="{e5d9c587-2c78-416b-98b3-e49a130c30f9}" FolderPath="Get\">
      <Declaration><![CDATA[METHOD GetByPos : Results.Result
VAR_INPUT
	nPos		: UDINT;
END_VAR
VAR_OUTPUT
	iSignal		: I_Signal;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF nPos > nMax THEN
	GetByPos := Results.Err.Ovf;
	RETURN;
END_IF

iSignal := _iSignal[nPos];
IF iSignal <> 0 THEN
	GetByPos := Results.Ok;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetByTag" Id="{f9092acb-53d8-4b29-8ce8-61c60a6cd7d2}" FolderPath="Get\">
      <Declaration><![CDATA[METHOD GetByTag : Results.Result;
VAR_INPUT
	iTag				: Tags.I_Tag;
END_VAR
VAR_OUTPUT
	iSignal				: I_Signal;
	nPos				: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _nLen = 0 THEN
	GetByTag := Results.None;
	RETURN;
END_IF

IF iTag = 0 THEN
	GetByTag := Results.Err.Itf0;
	RETURN;
END_IF

IF _bIsReleased THEN
	GetByTag := _GetByTagIfUntagged(iTag, iSignal => iSignal, nPos => nPos);
ELSE
	GetByTag := _GetByTagIfTagged(iTag, iSignal => iSignal, nPos => nPos);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetExtender" Id="{4258f516-d87f-4e39-b175-b588ab0d4ca6}" FolderPath="Get\">
      <Declaration><![CDATA[METHOD GetExtender : SignalListExtender
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetExtender.List := THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsReleased" Id="{9bfff713-fbb0-487e-9190-2065bbce0b5f}" FolderPath="Other\">
      <Declaration><![CDATA[METHOD IsReleased : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsReleased := _bIsReleased;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Length" Id="{9253d88c-07ba-4281-bb4a-e1f2505ca6d3}" FolderPath="Other\">
      <Declaration><![CDATA[METHOD Length : UDINT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Length := _nLen;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Push" Id="{a46155f4-dfe5-4de2-8b43-e3b76dea5c21}" FolderPath="Push\">
      <Declaration><![CDATA[METHOD Push : Results.Result
VAR_INPUT
	iSignal			: I_Signal;
END_VAR
VAR_OUTPUT
	nPos			: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _bIsReleased THEN
	Push :=_PushIfuntagged(iSignal, nPos => nPos);
ELSE
	Push := _PushIfTagged(iSignal, nPos => nPos);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Release" Id="{c28a7b0c-1732-498c-a68b-63e27c6b0d89}" FolderPath="Get\">
      <Declaration><![CDATA[METHOD Release 				: SignalListExtender;
VAR
	i						: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _bIsReleased THEN
	FOR i := 0 TO _nLen - 1 DO
		_iSignal[i].Tag.Leave(_fbTagOwner);
	END_FOR
	
	_bIsReleased := TRUE;
END_IF

Release.List := THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ToDebug" Id="{48775aba-9b61-47b3-b247-0ea63e8d7b10}" FolderPath="Other\">
      <Declaration><![CDATA[METHOD ToDebug : Debug.I_Debug
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ToDebug := THIS^;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>