<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="Signal" Id="{7c9b617f-f7bd-442d-b8c9-34e8d7bdc353}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FINAL Signal IMPLEMENTS I_SignalNode, I_Signal, I_Emit
VAR
	_tag			: Tags.Tag;
	_nCount			: UDINT;
	_nSize			: UDINT;
	_nId			: UDINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Node" Id="{1c06cc1f-8118-48fe-8ba5-55eb66c8e846}" />
    <Property Name="count" Id="{f0af54fa-0857-4928-a20f-0a9e19647f93}" FolderPath="Node\">
      <Declaration><![CDATA[PROPERTY INTERNAL count : UDINT
]]></Declaration>
      <Get Name="Get" Id="{b3963a5f-a76a-43cc-96e4-af6f9e4e44c2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[count := _nCount;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{c04c49b1-c4c3-4704-bb39-a536cd6f73f3}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_nCount := count;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Emit" Id="{d0827b51-da6b-4d29-b0a4-e9daca3aa340}">
      <Declaration><![CDATA[METHOD Emit
VAR_INPUT
	iArg			: I_Arg := 0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iArg = 0 THEN
	iArg := _tag;
END_IF

_EmitSignal(THIS^, iArg);]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitTo" Id="{7d1b0cf5-ddc0-4b02-8cd3-1b63ae2d2b2b}">
      <Declaration><![CDATA[METHOD EmitTo : Results.Result
VAR_INPUT
	iReceiver		: I_Receiver;
	iArg			: Calls.I_Arg;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iReceiver = 0 THEN
	EmitTo := Results.Err.Itf0;
	RETURN;
END_IF

IF iArg = 0 THEN
	iArg := Calls.Arg.phantom;
END_IF

iReceiver.Receive(iArg);
EmitTo := Results.Ok;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{4d7de249-46c9-44b2-9417-57b8c7e9fb7a}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)

	iCTable		: Domains.I_MutCTable;
END_VAR
VAR
	_nResult		: Results.Result;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iCTable <> 0 THEN
	CASE (_nResult := iCTable.Insert(THIS^)) OF
		Results.Ok:	
			// Do nothing
		Results.Err.ItfEq:
			Debug.DebugMsg(THIS^, 'Alredy exist within iCTable!');
			Debug.DebugMsg(iCTable, '^');
		Results.Err.Ovf:
			Debug.DebugMsg(THIS^, 'iCTable overflow!');
		ELSE
			Debug.DebugMsg(THIS^, Tc2_Standard.CONCAT(TO_STRING(_nResult), ': Unknown error'));
	END_CASE

ELSE
	Debug.DebugMsg(THIS^, 'iCTable = 0!');
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="id" Id="{819ef4a3-3ea7-4562-a22a-db3e51f6c5da}" FolderPath="Node\">
      <Declaration><![CDATA[PROPERTY INTERNAL id : UDINT
]]></Declaration>
      <Get Name="Get" Id="{f016ae8a-7c20-4ce4-9027-82c29b8cabd2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[id := _nId;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{95c075e4-42b4-442d-82bf-ffe4e4510c79}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_nId := id;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Option" Id="{0ff0a38b-8cae-4a43-a082-d0a5b09641ff}">
      <Declaration><![CDATA[METHOD Option : REFERENCE TO Signal
VAR_INPUT
	sOption		: Strings.Str;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Option REF= THIS^;
_tag.Option := sOption;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Pair" Id="{d45162d9-176c-4304-b03f-8a4e26d88ae6}">
      <Declaration><![CDATA[METHOD Pair : Results.Result
VAR_INPUT
	iReceiver		: I_Receiver;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iReceiver = 0 THEN
	Pair := Results.Err.Itf0;
ELSIF iReceiver.IsOk THEN
	Pair := _NewPair(THIS^, iReceiver);
ELSE
	Pair := Results.Error;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Property Name="size" Id="{99f5d688-c7d1-4660-8e05-53b7b2f0a0b8}" FolderPath="Node\">
      <Declaration><![CDATA[PROPERTY INTERNAL size : UDINT
]]></Declaration>
      <Get Name="Get" Id="{480c9fec-29fc-4477-9608-0888d461f887}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[size := _nSize;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{68795c0e-0755-495b-8c14-44aca974c6e1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_nSize := size;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Tag" Id="{ae8fb298-bf52-4d66-bee9-240c71f53a49}">
      <Declaration><![CDATA[PROPERTY Tag : Tags.I_Tag]]></Declaration>
      <Get Name="Get" Id="{7858a5b1-6904-4110-a1d7-ec2262f1063e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Tag := _tag;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Unpair" Id="{ae27d934-17a9-4eae-a002-1ba80dc83d65}">
      <Declaration><![CDATA[METHOD Unpair : Results.Result
VAR_INPUT
	iReceiver		: I_Receiver;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iReceiver = 0 THEN
	Unpair := Results.Err.Itf0;
ELSIF iReceiver.IsOk THEN
	Unpair := _Unpair(THIS^, iReceiver);
ELSE
	Unpair := Results.Error;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>