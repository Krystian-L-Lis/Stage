<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="Heating_State_Fault" Id="{fa971ab9-bf60-46f6-b6fe-7e6ac89ac22d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Heating_State_Fault EXTENDS Heating_State IMPLEMENTS I_Execute
VAR
	_exe		: Execute(THIS^);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Execute" Id="{dd289930-8188-4bea-a8b1-8037094b52d7}">
      <Declaration><![CDATA[METHOD Execute
VAR_INPUT
	nPhase: INT;
END_VAR
VAR
	cmp			: TagCmp;
	bFault		: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _ctx.io.in.bBurnerOverload THEN
	bFault := TRUE;
END_IF

IF _ctx.io.in.bPumpOverload THEN
	bFault := TRUE;
END_IF

IF _ctx.io.in.rBoilerPressure > _ctx.hmi.rMaxPressure THEN
	bFault := TRUE;
END_IF

IF _ctx.io.in.rBoilerPressure < _ctx.hmi.rMinPressure THEN
	bFault := TRUE;
END_IF

IF _ctx.io.in.rBoilerTemp > _ctx.hmi.rMaxTemperature THEN
	bFault := TRUE;
END_IF

IF cmp.Set(_ctx.state.iMgr.Current.Tag).Match(_ctx.state.iFault.Tag).Match(_ctx.state.iSafety.Tag).IsTrue() THEN
	bFault := FALSE;
END_IF

IF NOT bFault THEN
	RETURN;
END_IF

_ctx.state.iMgr.Request(_ctx.state.iFault);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnEntry" Id="{1a485ee3-23cb-485d-a3aa-fbbe73930b2a}">
      <Declaration><![CDATA[METHOD PROTECTED OnEntry
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _ctx.io.in.bBurnerOverload THEN
	_ctx.hmi.sErrorText := 'Caused by burner overload!';
ELSIF _ctx.io.in.bPumpOverload THEN
	_ctx.hmi.sErrorText := 'Caused by pump overload!';
ELSIF _ctx.io.in.rBoilerPressure > _ctx.hmi.rMaxPressure THEN
	_ctx.hmi.sErrorText := 'Caused by boiler overpressure!';
ELSIF _ctx.io.in.rBoilerPressure < _ctx.hmi.rMinPressure THEN
	_ctx.hmi.sErrorText := 'Caused by boiler underpressure!';
ELSIF _ctx.io.in.rBoilerTemp > _ctx.hmi.rMaxTemperature THEN
	_ctx.hmi.sErrorText := 'Caused by boiler overheat!';
END_IF

_ctx.hmi.sStatusText := CONCAT('Fault: ', _ctx.hmi.sErrorText);

_ctx.hmi.nStatusColor := COL.RED.Raw;

_ctx.hmi.sButtonText := 'Press to RESET';
_ctx.hmi.nButtonColor := COL.INVISIBLE.Raw;

_ctx.io.out.bBurner := FALSE;
_ctx.io.out.bPump := FALSE;

_ctx.priv.iQueue.Clear();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExecute" Id="{47c8e274-11fa-47cf-8f15-91062de1a435}">
      <Declaration><![CDATA[METHOD PROTECTED OnExecute
VAR
	bFault : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _ctx.io.in.bBurnerOverload THEN
	bFault := TRUE;
END_IF

IF _ctx.io.in.bPumpOverload THEN
	bFault := TRUE;;
END_IF

IF _ctx.io.in.rBoilerPressure > _ctx.hmi.rMaxPressure THEN
	bFault := TRUE;;
END_IF

IF _ctx.io.in.rBoilerPressure < _ctx.hmi.rMinPressure THEN
	bFault := TRUE;;
END_IF

IF _ctx.io.in.rBoilerTemp > _ctx.hmi.rMaxTemperature THEN
	bFault := TRUE;;
END_IF

IF _ctx.hmi.bButton AND NOT bFault THEN
	_ctx.hmi.bButton := FALSE;
	_ctx.state.iMgr.Request(_ctx.state.iDisable);
ELSIF NOT bFault THEN
	_ctx.hmi.nButtonColor := COL.BLACK.Raw;	
ELSE
	_ctx.hmi.nButtonColor := COL.INVISIBLE.Raw;	
	_ctx.hmi.bButton := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>