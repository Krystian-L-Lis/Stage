<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="Room_OnSystemEvent" Id="{41d76812-2850-4f2a-a1e2-4775d2650df6}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Room_OnSystemEvent IMPLEMENTS I_Init, I_Callable
VAR
	_init				: Init(THIS^);
	_onSystemEvent		: Receiver(THIS^);
	
	_bError				: BOOL;
	
	_iResumeEvent		: I_Signal;
	_iPauseEvent		: I_Signal;
	_iEnableEvent		: I_Signal;
	_iDisableEvent		: I_Signal;
	
	_ctx				: REFERENCE TO Room_Ctx;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="_GetSignalAndPair" Id="{1d888461-205c-4863-99fa-c9121a7dfd93}">
      <Declaration><![CDATA[METHOD PRIVATE _GetSignalAndPair
VAR_INPUT
	iEntity		: I_Entity;
	sToFind		: Str;
END_VAR
VAR_OUTPUT
	iSignal	: I_Signal;
END_VAR
VAR
	_r			: Result;
	strb		: Strb;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE GetSignal(iEntity, sToFind, iSignal) OF
	Ok:
		IF IsFail(iSignal.Pair(_onSystemEvent), nOut => _r) THEN
			_bError := TRUE;
			DebugMsg(iSignal, strb.Append('Cannot pair _systemRec with this signal! Error code: ').Append(INT_TO_STRING(_r)).Read());
		END_IF
	ELSE
		_bError := TRUE;
		DebugMsg(THIS^, strb.Append('Cannot pair _systemRec with a ').Append(sToFind).Append('!').Read());
		DebugMsg(iEntity, strb.Append(sToFind).Append(' not found!').Read());
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Call" Id="{42f05947-b063-4e2f-b93d-01e7d6e1ce6a}">
      <Declaration><![CDATA[METHOD Call
VAR_INPUT
	iArg	: StageCore.I_Arg;
END_VAR
VAR
	cmp		: TagCmp;
	_iTag	: I_Tag;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _bError THEN
	_ctx.hmi.sErrorText := 'Incorrect receiver initialization!';
	_ctx.state.iMgr.Request(_ctx.state.iFault);
	RETURN;
END_IF

IF IsErr(IArgToITag(iArg, _iTag)) THEN
	_ctx.hmi.sErrorText := 'Incorrect call argument!';
	_ctx.state.iMgr.Request(_ctx.state.iFault);
	RETURN;
END_IF

cmp.Set(_iTag);
IF cmp.Match(_iEnableEvent.Tag).IsTrue() THEN
	IF _ctx.state.iMgr.Current = 0 THEN
		RETURN;
	END_IF

	cmp.Set(_ctx.state.iMgr.Current.Tag);
	IF cmp.Match(_ctx.state.iFault.Tag)
			.Match(_ctx.state.iDisable.Tag)
			.Match(_ctx.state.iIdle.Tag)
			.IsTrue() THEN
			
		RETURN;
	END_IF
	
	_ctx.priv.iRequestEvent.Emit(_ctx);
	
	RETURN;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{540ad04e-a132-4a9c-92b6-8c504a391537}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)
	
	ctx			: REFERENCE TO Room_Ctx;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_ctx REF= ctx;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{c21ffc82-a83f-42ba-b5d9-14591fef07b7}">
      <Declaration><![CDATA[METHOD Init
VAR_INPUT
	nPhase: INT;
END_VAR
VAR
	_iEntity	: I_Entity;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE IsOk(GetNextEntity(_iEntity)) DO
	IF IsFail(HasTagOption(_iEntity, 'Heating')) THEN
		CONTINUE;
	END_IF
	
	_GetSignalAndPair(_iEntity, '*._enableEvent', iSignal => _iEnableEvent);
	
	RETURN;
END_WHILE]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>