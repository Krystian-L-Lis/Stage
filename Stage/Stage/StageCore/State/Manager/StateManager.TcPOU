<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="StateManager" Id="{9af5d38b-2c9a-4ad2-afd9-0321b459f566}" SpecialFunc="None">
    <Declaration><![CDATA[(*
Manages the lifecycle and transitions of states within an entity.  
Supports queuing state change requests, triggering state transitions, and broadcasting state change events.  
Adds a `_stateChangeEvent` Signal to the owning `I_Entity` during initialization, enabling external components to listen for state changes.
*)
FUNCTION_BLOCK FINAL StateManager IMPLEMENTS I_Execute, I_StateManager, I_Debug

VAR
	_comp				: Component(THIS^);

	_exe				: Execute(THIS^);
	_sm					: _StateMachine;
	_buffer				: _StateBuffer;
	
	_stateChangeEvent	: Signal;
	
	_iPretender			: I_State;
	_iCurrent			: I_State;
	_iPrevious 			: I_State;
	
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="_" Id="{b9f442f7-4971-4185-be3d-d4d6b1569cc6}" />
    <Folder Name="Request" Id="{81375855-59e4-4ae6-b079-7f9366b0efcb}" />
    <Folder Name="State" Id="{3323aa43-3a83-405c-9127-b99e6e5b1777}" />
    <Property Name="Current" Id="{56420e57-ba0a-40d3-a86e-12a2b1e27f6c}" FolderPath="State\">
      <Declaration><![CDATA[(*
Retrieves the currently active state managed by the state manager.
*)
PROPERTY Current : I_State]]></Declaration>
      <Get Name="Get" Id="{6dfc2ef8-549f-4ef6-9ab0-969a1aced6b1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Current := _iCurrent;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Execute" Id="{f267a716-e453-4e52-a04a-1da93f557d85}" FolderPath="_\">
      <Declaration><![CDATA[// DO NOT CALL MANUALLY
{attribute 'hide'}
METHOD Execute
VAR_INPUT
	nPhase: INT := 0;
END_VAR
VAR
	_iNewState		: I_State;
	_iOldState		: I_State;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF IsOk(_buffer.Pop(iState => _iNewState)) THEN
	_iPretender := _iNewState;
	IF IsOk(_sm.Change(_iNewState, iOldState => _iOldState)) THEN
		_stateChangeEvent.Emit(_iNewState.Tag);
		
		_iCurrent		:= _iNewState;
		IF _iOldState <> 0 THEN
			_iPrevious		:= _iOldState;
		END_IF
		
	END_IF
	
	_iPretender		:= 0;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Property Name="Owner" Id="{f4018121-2b1d-444e-9a31-6e2d9cde72f4}" FolderPath="_\">
      <Declaration><![CDATA[(*
Returns the entity that owns this state.
*)
PROPERTY Owner : I_Entity]]></Declaration>
      <Get Name="Get" Id="{f50d6afe-6131-4b10-8754-fbb6797dbc8d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Owner := _comp.Entity;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Pretender" Id="{03d469e9-e5de-4b22-9ad6-7121be122863}" FolderPath="State\">
      <Declaration><![CDATA[(*
Retrieves the state that is queued to become active next, but has not yet transitioned.
*)
PROPERTY Pretender : I_State
]]></Declaration>
      <Get Name="Get" Id="{cd77ba45-868a-497f-86a5-d426aa5face8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Pretender := _iPretender;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Previous" Id="{506a1524-211d-46a2-a335-40f8e25eab3e}" FolderPath="State\">
      <Declaration><![CDATA[(*
Retrieves the last active state prior to the current one.
*)
PROPERTY Previous : I_State
]]></Declaration>
      <Get Name="Get" Id="{34c2f99f-f5d0-4f3c-a7e7-87b5355c4a6f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Previous := _iPrevious;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Proxy" Id="{c84b4b1b-1dde-471a-9a35-21636f83c5d3}" FolderPath="_\">
      <Declaration><![CDATA[(*
Allows initializing an external interface variable with an interface pointer to this instance within declaration block.
Example:
iSMgr: I_StateManager;
smgr: StateManager := (Proxy := iSMgr);
Result: iSMgr <> 0 
*)
PROPERTY Proxy : REFERENCE TO I_StateManager]]></Declaration>
      <Set Name="Set" Id="{f44529b5-5fa8-4582-ba32-00ad5d0d8de7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Proxy := THIS^;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Request" Id="{12dc1eaf-0190-483f-ada2-8afa12a43cbf}" FolderPath="Request\">
      <Declaration><![CDATA[(*
Queues a request to transition to a specified state.  
Returns:
- `Ok` - If the state change request is successfully queued.
- `Err.Itf0` - If the provided state interface is invalid.
- `Err.NoMatch` - If the state does not belong to the same entity.
- `Err.IncArg` - If the state is already in the queue.
*)
METHOD Request : Result
VAR_INPUT
	iState			: I_State;
END_VAR
VAR
	iStateInternal	: I_StateInternal;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iState = 0 THEN
	Request := Err.Itf0;
	RETURN;
END_IF

IF iState.Owner <> _comp.Entity THEN
	Request := Err.NoMatch;
	RETURN;
END_IF

Request := _buffer.Push(iState);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>