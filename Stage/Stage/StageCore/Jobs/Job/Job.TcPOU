<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="Job" Id="{d189be26-c4d1-421c-b40d-0f9c5d388d23}" SpecialFunc="None">
    <Declaration><![CDATA[(*
An abstract representation of a system job, providing the foundation for implementing job-specific behavior. Manages its state.  
Offers default behavior for its lifecycle methods, allowing programmers to override only the relevant parts.
*)
FUNCTION_BLOCK ABSTRACT Job IMPLEMENTS I_Job
VAR
	{attribute 'hide'}
	_iNext: I_Job;
	{attribute 'hide'}
	_iPrev: I_Job;
	{attribute 'hide'}
	_iWorker: I_Worker;
	{attribute 'hide'}
	_eState: JobState;
	
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="_" Id="{788cea3f-9c89-4c58-9f8b-26391a806f35}" />
    <Folder Name="Impl" Id="{903468c9-970b-4b8f-8b55-f634617a3fee}" />
    <Folder Name="Job" Id="{30958162-07b8-4f88-92e6-ce23182d425b}" />
    <Property Name="_Next" Id="{5e0a6afe-9bd8-403e-ae27-c1e3514413ad}" FolderPath="_\">
      <Declaration><![CDATA[PROPERTY INTERNAL _Next : I_Job
]]></Declaration>
      <Get Name="Get" Id="{56f40b47-08b4-4d87-acff-0407d2abd968}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Next := _iNext;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{ce3e5deb-8114-42c1-92b7-0c5fd1201809}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_iNext := _Next;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="_OnAbort" Id="{e92d2e04-f1ff-4be7-ab2f-f4ccbe6aaae2}" FolderPath="_\">
      <Declaration><![CDATA[METHOD INTERNAL _OnAbort
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[OnAbort();]]></ST>
      </Implementation>
    </Method>
    <Method Name="_OnDone" Id="{b43c6393-59cc-4804-a684-0f30fe9daee8}" FolderPath="_\">
      <Declaration><![CDATA[METHOD INTERNAL _OnDone
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[OnDone();]]></ST>
      </Implementation>
    </Method>
    <Method Name="_OnExit" Id="{f7c9dfbc-ac16-42d3-b2a3-e8cc47ad0b0e}" FolderPath="_\">
      <Declaration><![CDATA[METHOD INTERNAL _OnExit
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[OnExit();]]></ST>
      </Implementation>
    </Method>
    <Method Name="_OnRun" Id="{282b1123-78b3-4f76-80ac-354db08c0351}" FolderPath="_\">
      <Declaration><![CDATA[METHOD INTERNAL _OnRun
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_eState := JobState.Running;
OnRun();
_eState := JobState.Ready;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_OnStart" Id="{f1bf3abf-8e4d-4720-8772-4c2bdee28247}" FolderPath="_\">
      <Declaration><![CDATA[METHOD INTERNAL _OnStart
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[OnStart();]]></ST>
      </Implementation>
    </Method>
    <Property Name="_Prev" Id="{ab52e9e9-e1b8-4e36-a7cc-c3ffe7b8a011}" FolderPath="_\">
      <Declaration><![CDATA[PROPERTY INTERNAL _Prev : I_Job
]]></Declaration>
      <Get Name="Get" Id="{e01b98b1-7d87-4f71-b8c9-d2aa7f7c1966}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Prev := _iPrev;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{79a3a2b2-e6f3-4c9e-ab65-e3ea0bffc457}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_iPrev := _Prev;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Abort" Id="{c1b254d3-82b7-426a-bcdd-c337343702ca}" FolderPath="Job\">
      <Declaration><![CDATA[(*
Notifies scheduler to aboort this job.
Returns Err.IncArg on State = Idle
*)
METHOD Abort : Result
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _eState = JobState.Idle THEN
	Abort := Err.IncArg;
	RETURN;
END_IF

_eState := JobState.Aborted;
Abort := Ok;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Done" Id="{aabcf2a2-bc4a-433a-851b-c2329283fbd4}" FolderPath="Job\">
      <Declaration><![CDATA[(*
Notifies scheduler that the jobs is completed.
Returns Err.IncArg on State <> Running
*)
METHOD PROTECTED Done : Result
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _eState <> JobState.Running THEN
	Done := Err.IncArg;
	RETURN;
END_IF

_eState := JobState.Completed;
Done := Ok;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAbort" Id="{f089fbee-eaef-4808-8833-c443e5817bdf}" FolderPath="Impl\">
      <Declaration><![CDATA[(*
Executed when this job is aborted.  
*)
METHOD PROTECTED OnAbort
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnDone" Id="{17b94aef-24bb-4442-89db-afa253b700b7}" FolderPath="Impl\">
      <Declaration><![CDATA[(*
Executed when this job is done.  
*)
METHOD PROTECTED OnDone
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnExit" Id="{9f03c749-7a25-43b3-8a82-56026a5506e0}" FolderPath="Impl\">
      <Declaration><![CDATA[(*
Executed when this job is dequeued.  
*)
METHOD PROTECTED OnExit
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnRun" Id="{8c344d1b-09b4-407e-b123-c1b286c36272}" FolderPath="Impl\">
      <Declaration><![CDATA[(*
Executed when this job is run.  
*)
METHOD PROTECTED OnRun
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnStart" Id="{3d6b24a1-68fc-4aa8-bed1-6da7e16193ea}" FolderPath="Impl\">
      <Declaration><![CDATA[(*
Executed when this job is started.  
*)
METHOD PROTECTED OnStart
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Start" Id="{64d9d087-d2ba-4baf-8149-dc62e899d49b}" FolderPath="Job\">
      <Declaration><![CDATA[(*
Starts the job and adds it to Workers queue.
Returns Err.IncArg on State <> Idle.
Returns Err.Itf0 on Worker = 0.
*)
METHOD Start : Result
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _eState <> JobState.Idle THEN
	Start := Err.IncArg;
	RETURN;
END_IF

IF _iWorker = 0 THEN
	Start := Err.Itf0;
	RETURN;
END_IF

IF IsOk(_iWorker.Enqueue(THIS^), nOut => Start) THEN
	_eState := JobState.Ready;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="State" Id="{6447f694-df9c-483c-9624-6f2e9a8b97e7}" FolderPath="Job\">
      <Declaration><![CDATA[(*
Returns Jobs state
*)
PROPERTY State : JobState]]></Declaration>
      <Get Name="Get" Id="{bd91dcf6-8939-49c4-b291-29f8a1b3b103}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[State := _eState;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Worker" Id="{62c059a9-8170-459f-9379-8371a51c831c}" FolderPath="Job\">
      <Declaration><![CDATA[(*
Returns Worker working on this job
*)
PROPERTY Worker : I_Worker
]]></Declaration>
      <Get Name="Get" Id="{927952be-4625-4ef1-867b-591ea7d3dec4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Worker := _iWorker;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{2b1cd96d-0301-44ad-89a4-fe218d4224f9}">
        <Declaration><![CDATA[
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF _eState = JobState.Idle THEN
	_iWorker := Worker;
END_IF]]></ST>
        </Implementation>
      </Set>
    </Property>
  </POU>
</TcPlcObject>