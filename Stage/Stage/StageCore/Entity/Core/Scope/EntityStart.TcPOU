<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="EntityStart" Id="{a495af02-6953-4eb7-8379-f765a35279b5}" SpecialFunc="None">
    <Declaration><![CDATA[(*
Represents a registered entity in the Entity-Component system and start of its scope.
Nested scopes are possible, components are always registered within most inner scope.
*)
FUNCTION_BLOCK EntityStart IMPLEMENTS I_Entity, I_Debug;
VAR
	_eState: _EntityState;
	_iNext: I_Entity;
	_iPrev: I_Entity;
	_iFirstComp: I_Component;
	_iLastComp: I_Component;
	_nSize: UDINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="_" Id="{71138bdc-ea6c-4ac9-85c3-4bca04b71bf2}" />
    <Property Name="_FirstComp" Id="{8c36c7b5-bea4-41e6-9361-ac708fdba737}" FolderPath="_\">
      <Declaration><![CDATA[PROPERTY INTERNAL _FirstComp : I_Component
]]></Declaration>
      <Get Name="Get" Id="{5d4437ea-6346-45ee-ace0-7503ef48b6c5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_FirstComp := _iFirstComp;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{904744f1-48c8-4544-b9b8-fb75c4ba232c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_iFirstComp := _FirstComp;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="_LastComp" Id="{a38a30c0-379b-4f36-b9a7-b26f9b665c5b}" FolderPath="_\">
      <Declaration><![CDATA[PROPERTY INTERNAL _LastComp : I_Component
]]></Declaration>
      <Get Name="Get" Id="{15bc4223-5a61-4d79-a54e-b1f51cbd1016}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_LastComp := _iLastComp;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{9ffbfc25-5fd8-4793-ab45-723f6c5540d3}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_iLastComp := _LastComp;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="_Next" Id="{68d3a67b-8c2a-456d-a892-c4bd169b2e5b}" FolderPath="_\">
      <Declaration><![CDATA[PROPERTY INTERNAL _Next : I_Entity
]]></Declaration>
      <Get Name="Get" Id="{935e1c7b-1fbe-4a74-98d0-8a909455142f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Next := _iNext;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{8656fed9-46ef-4dff-8354-2d70e7c6322a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_iNext := _Next;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="_Prev" Id="{9810527d-844b-4ebe-9c35-06ff3f26f302}" FolderPath="_\">
      <Declaration><![CDATA[PROPERTY INTERNAL _Prev : I_Entity
]]></Declaration>
      <Get Name="Get" Id="{bcba2fd7-da05-4ca0-8b61-64d235946143}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Prev := _iPrev;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{777acdca-059d-4822-abc3-149d4c291f8d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_iPrev := _Prev;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="_Size" Id="{c8bb90ea-5aec-46f6-9a2f-7b176fd3cf5b}" FolderPath="_\">
      <Declaration><![CDATA[PROPERTY INTERNAL _Size : UDINT]]></Declaration>
      <Get Name="Get" Id="{c39f82f0-f0a7-4ace-8836-3bf0456c0b11}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Size := _nSize;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{5724da63-ce15-41e5-b35f-3b6648bbdad5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_nSize := _Size;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="_State" Id="{38731d53-40cb-4603-88c4-6e6dba54e8fa}" FolderPath="_\">
      <Declaration><![CDATA[PROPERTY INTERNAL _State : _EntityState
]]></Declaration>
      <Get Name="Get" Id="{4eeaebe0-c084-444b-ae11-73868070508d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_State := _eState;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{675f4f6e-5b4b-4b8d-a841-c536a92dfd69}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_eState := _State;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Fb_init" Id="{b0e00dc3-eb49-4117-9095-1283145ba835}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
{attribute 'hide'}
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)
END_VAR
VAR
	_nResult	: Result;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF IsErr(_EntityStart(THIS^), nOut => _nResult) THEN
	NewDebug(THIS^, Param.INIT_INTERNAL_DEBUG_MODE, Tc2_Standard.CONCAT('_StartEntity(THIS^) failed with code: ', ResultToStr(_nResult)));
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetNextComp" Id="{9c6bf518-2f43-45c9-9f83-38ff2c39a1f8}">
      <Declaration><![CDATA[(*
Description: Retrieves a next component after the inputted one or first component if referenced value is 0. 
Returns:
- Ok - Returns upon success, updates referenced value with new component.
- Err.InvRef - Invalid output reference.
- Err.ItfEq - Provided interface pointer doesn't belong to the queried entity. Nulls reference.
- Err.NotFound - The entity doesn't contain any components. Nulls reference.
- Err.End - No more components. Nulls reference.
*)
METHOD GetNextComp : Result
VAR_INPUT
	iOut	: REFERENCE TO I_Component;
END_VAR
VAR
	_iThis: I_Entity := THIS^;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Check if the given output reference is valid
IF NOT __ISVALIDREF(iOut) THEN
    // If not a valid reference, return invalid reference error
    GetNextComp := Err.InvRef;
    RETURN;
END_IF

// If no starting component is specified, begin with the first component
IF iOut = 0 THEN
    IF _iFirstComp <> 0 THEN
        // Return the first component in the list
        iOut := _iFirstComp;
        GetNextComp := Ok;
    ELSE
        // No components exist in the list
        GetNextComp := Err.NotFound;
    END_IF

// If the current component does not belong to this entity, reject the call
ELSIF iOut._Entity <> _iThis THEN
    // Cross-linked or stale reference: component doesn't belong to this context
	iOut := 0;
    GetNextComp := Err.ItfEq;

// If there's no next component, we've reached the end of the list
ELSIF iOut._Next = 0 THEN
	iOut := 0;
    GetNextComp := Err.End;

// Otherwise, return the next component in the list
ELSE
    iOut := iOut._Next;
    GetNextComp := Ok;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetPrevComp" Id="{eb97c05c-8131-460b-a4e4-af8eb0fd3c47}">
      <Declaration><![CDATA[(*
Description: Retrieves a previous component before the inputted one or last component if referenced value is 0.
Returns:
- Ok - Returns upon success, updates referenced value with new component.
- Err.InvRef - Invalid output reference.
- Err.ItfEq - Provided interface pointer doesn't belong to the queried entity. Nulls reference.
- Err.NotFound - The entity doesn't contain any components. Nulls reference.
- Err.End - No more components. Nulls reference.
*)
METHOD GetPrevComp : Result
VAR_INPUT
	iOut	: REFERENCE TO I_Component;
END_VAR
VAR
	_iThis: I_Entity := THIS^;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Check if the given output reference is valid
IF NOT __ISVALIDREF(iOut) THEN
    // If not a valid reference, return invalid reference error
    GetPrevComp := Err.InvRef;
    RETURN;
END_IF

// If no starting component is specified, begin with the first component
IF iOut = 0 THEN
    IF _iLastComp <> 0 THEN
        // Return the first component in the list
        iOut := _iLastComp;
        GetPrevComp := Ok;
    ELSE
        // No components exist in the list
        GetPrevComp := Err.NotFound;
    END_IF

// If the current component does not belong to this entity, reject the call
ELSIF iOut._Entity <> _iThis THEN
    // Cross-linked or stale reference: component doesn't belong to this context
	iOut := 0;
    GetPrevComp := Err.ItfEq;

// If there's no next component, we've reached the end of the list
ELSIF iOut._Prev = 0 THEN
	iOut := 0;
    GetPrevComp := Err.End;

// Otherwise, return the next component in the list
ELSE
    iOut := iOut._Prev;
    GetPrevComp := Ok;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{5ea77c14-4244-4747-bff8-829c45204e52}">
      <Declaration><![CDATA[(*
Provides the size of the entity, indicating the number of components it manages.  
Note: For internal logic purposes, this value is incremented by one beyond the actual component count.
*)
PROPERTY Size : UDINT]]></Declaration>
      <Get Name="Get" Id="{30ab1e6b-7de1-4a4a-8ffb-bbbac7be4e9d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := _nSize;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>