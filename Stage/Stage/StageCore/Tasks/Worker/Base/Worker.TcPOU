<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="Worker" Id="{bdf5bac2-02d6-47f1-90f6-4bb785ea36ad}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Worker IMPLEMENTS I_Worker
VAR
	_iFirst: I_JobNode;
	_iLast: I_JobNode;	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Defer" Id="{eadb621f-822e-46a7-8f87-8d6a18628a16}">
      <Declaration><![CDATA[METHOD Defer : Result
VAR_INPUT
    iJob : I_JobNode;
END_VAR
VAR
    _iPrev  : I_JobNode;
    _iNext  : I_JobNode;
    _iThis  : I_Worker := THIS^;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iJob = 0 THEN
    Defer := Err.Itf0;
    RETURN;
END_IF;

IF iJob.Worker <> _iThis THEN
    Defer := Err.NoMatch;
    RETURN;
END_IF;

_iPrev := iJob._Prev;
_iNext := iJob._Next;

IF _iPrev <> 0 THEN
    _iPrev._Next := _iNext;
ELSE
    _iFirst := _iNext;
END_IF;

IF _iNext <> 0 THEN
    _iNext._Prev := _iPrev;
ELSE
    _iLast := _iPrev;
END_IF;

iJob._Prev := _iLast;
iJob._Next := 0;

IF _iLast <> 0 THEN
    _iLast._Next := iJob;
ELSE
    _iFirst := iJob;
END_IF;

_iLast := iJob;

Defer := Ok;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Dequeue" Id="{1b67c59f-2d85-421b-bd6f-8786ee3aa944}">
      <Declaration><![CDATA[METHOD Dequeue : Result
VAR_INPUT
	iJob: I_JobNode;
END_VAR
VAR
	_iPrev: I_JobNode;
	_iNext: I_JobNode;
	_iThis: I_Worker := THIS^;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iJob = 0 THEN
	Dequeue := Err.Itf0;
    RETURN;
END_IF;

IF iJob.Worker <> _iThis THEN
    Dequeue := Err.NoMatch;
    RETURN;
END_IF;

_iPrev := iJob._Prev;
_iNext := iJob._Next;

IF _iPrev <> 0 THEN
    _iPrev._Next := _iNext;
ELSE
    _iFirst := _iNext;
END_IF;

IF _iNext <> 0 THEN
    _iNext._Prev := _iPrev;
ELSE
    _iLast := _iPrev;
END_IF;

iJob._Reset();

Dequeue := Ok;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Enqueue" Id="{1aadc42c-8e0b-4826-bcf8-04220f1befbe}">
      <Declaration><![CDATA[METHOD Enqueue : Result
VAR_INPUT
	iJob: I_JobNode;
END_VAR
VAR
	_iThis: I_Worker := THIS^;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iJob = 0 THEN
    Enqueue := Err.Itf0;
    RETURN;
END_IF;

IF iJob.Worker <> _iThis THEN
    Enqueue := Err.NoMatch;
    RETURN;
END_IF;

iJob._Prev := _iLast;
iJob._Next := 0;
IF _iLast <> 0 THEN
    _iLast._Next := iJob;
ELSE
    _iFirst := iJob;
END_IF;
_iLast := iJob;

Enqueue := Ok;]]></ST>
      </Implementation>
    </Method>
    <Property Name="First" Id="{0ef2726b-8b8c-4c46-b13c-2fec5850ea27}">
      <Declaration><![CDATA[PROPERTY First : I_JobNode
]]></Declaration>
      <Get Name="Get" Id="{fb29ce8f-7ac5-46e9-a0ef-d876a531af6a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[First := _iFirst;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Run" Id="{04e86e8d-8edf-4461-b2bc-3c27200c6d8d}">
      <Declaration><![CDATA[METHOD Run : Result
VAR_INPUT
	iJob	: I_JobNode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iJob <> 0 THEN
	CASE iJob.State OF
		TaskState.Aborted:
			Run := Ok;
		
		TaskState.Completed:
			Run := Ok;	
		
		TaskState.Ready:
			iJob._Run();
			Run := Ok;
	
		TaskState.Error, TaskState.Idle, TaskState.Running:
			Run := Err.IncArg;
			
	END_CASE
ELSE
	Run := Err.Itf0;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>