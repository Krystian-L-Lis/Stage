<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="StateManager" Id="{065a1b8b-6ec2-4683-9c85-0a171eea2127}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK StateManager
VAR_GENERIC CONSTANT
	nMax				: UDINT := 10;
END_VAR
IMPLEMENTS Rt.I_Execute, I_StateManager, Debug.I_Debug

VAR
	_fbExecute			: Rt.Execute(THIS^);
	_iMachine			: I_StateMachine;
	_iRepo				: I_StateRepo;
	_iBuffer			: I_StateBuffer;
	_iBufferCached		: ARRAY[0..nMax] OF BOOL; 
	
	_iPretender			: Tags.I_Tag;
	_iCurrent			: Tags.I_Tag;
	_iPrevious 			: Tags.I_Tag;
	
	OnChange			: Broadcast.Signal;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="_" Id="{ffcbd28d-9428-4274-a87e-4b8174b3ac2c}" />
    <Folder Name="Get" Id="{1e565a68-1037-4243-bbd0-0a446f8cc7a2}" />
    <Folder Name="Other" Id="{999cd10e-6b9d-4765-a894-c58d05bc2784}" />
    <Folder Name="Request" Id="{ed804d72-fb70-4c65-bf7b-86df8b0fc87b}" />
    <Folder Name="State" Id="{a9ae70db-13ab-496f-ac96-316db0e68775}" />
    <Property Name="Current" Id="{8b4357a3-0019-4473-ae73-edd806e7839c}" FolderPath="State\">
      <Declaration><![CDATA[PROPERTY Current : Tags.I_Tag]]></Declaration>
      <Get Name="Get" Id="{28c7c981-a1cf-4e77-9e3c-2049984b4f06}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Current := _iCurrent;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Execute" Id="{aa3c2744-0752-4d09-b4f1-c2fccd6ebfa8}" FolderPath="_\">
      <Declaration><![CDATA[METHOD Execute
VAR
	_iNewState		: I_State;
	_iOldState		: I_State;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Results.IsOk(_iBuffer.Pop(iState => _iNewState)) THEN
	_iPretender := _iNewState.Tag;
	_iBufferCached[_iPretender.Cache] := FALSE;
	IF Results.IsOk(_iMachine.ChangeState(_iNewState, iOldState => _iOldState)) THEN
		_iPretender		:= 0;
		_iCurrent		:= _iNewState.Tag;
		IF _iOldState <> 0 THEN
			_iPrevious		:= _iOldState.Tag;
		END_IF
		OnChange.Option(CState.SUCCESS).Emit(_iMachine.Tag);
	ELSE
		OnChange.Option(CState.FAIL).Emit(_iMachine.Tag);
	END_IF
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{3dc9c3a8-49c5-449d-ac2d-e2df3c91d651}" FolderPath="_\">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)
	
	iMachine		: I_StateMachine;
	iRepo			: I_StateRepo;
	iBuffer			: I_StateBuffer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iMachine = 0 OR iBuffer = 0 OR iRepo = 0 THEN
	IF iMachine = 0 THEN
		Debug.DebugMsg(THIS^, Tc2_Standard.CONCAT(__POUNAME(), ': Initialized with null iStateMachine: I_StateMachine!'));	
	END_IF
	IF iBuffer = 0 THEN
		Debug.DebugMsg(THIS^, Tc2_Standard.CONCAT(__POUNAME(), ': Initialized with null iBuffer: I_StateList!'));	
	END_IF
	IF iRepo = 0 THEN
		Debug.DebugMsg(THIS^, Tc2_Standard.CONCAT(__POUNAME(), ': Initialized with null iRepo: I_StateList!'));
	END_IF
	RETURN;
END_IF

_iMachine := iMachine;
_iBuffer := iBuffer;
_iRepo := iRepo;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Get" Id="{ff0b8d51-c83b-454c-9b2f-08c4355657ce}" FolderPath="Get\">
      <Declaration><![CDATA[METHOD Get : Results.Result
VAR_INPUT
	nPos				: UDINT;
END_VAR
VAR_OUTPUT
	iTag				: Tags.I_Tag;
END_VAR
VAR
	_iState				: I_State;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Results.IsOk(_iRepo.GetByPos(nPos, iState => _iState), eCarry => Get) THEN
	iTag := _iState.Tag;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetOnChange" Id="{93c67a9f-7a86-4bb2-82ec-ca040e0be2a4}" FolderPath="Other\">
      <Declaration><![CDATA[METHOD GetOnChange : Broadcast.I_Signal
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetOnChange := OnChange;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Pretender" Id="{665a726f-02d8-482c-a5d5-fd4e8b20bc17}" FolderPath="State\">
      <Declaration><![CDATA[PROPERTY Pretender : Tags.I_Tag]]></Declaration>
      <Get Name="Get" Id="{ee7f39d4-891a-44fc-ba0f-24d59b09b4b5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Pretender := _iPretender;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Previous" Id="{fff55aff-d560-4330-a679-5d99f2c11bd6}" FolderPath="State\">
      <Declaration><![CDATA[PROPERTY Previous : Tags.I_Tag]]></Declaration>
      <Get Name="Get" Id="{40cf8c80-840c-4ebd-9081-8dde537fcf98}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Previous := _iPrevious;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Request" Id="{b9900fb1-52df-4148-a485-4297bc286939}" FolderPath="Request\">
      <Declaration><![CDATA[METHOD Request : Results.Result
VAR_INPUT
	iTag		: Tags.I_Tag;
END_VAR
VAR
	_iState		: I_State;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Results.IsOk(_iRepo.GetByTag(iTag, iState => _iState), eCarry => Request) THEN
	RETURN;
END_IF

IF _iBufferCached[iTag.Cache] THEN
	Request := Results.Ok;
	RETURN;
END_IF

_iBufferCached[iTag.Cache] := TRUE;

Request := _iBuffer.Push(_iState);]]></ST>
      </Implementation>
    </Method>
    <Method Name="ToDebug" Id="{c2cbe9f6-89d4-4557-9c56-b260351c7b4d}" FolderPath="Other\">
      <Declaration><![CDATA[METHOD ToDebug : Debug.I_Debug
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ToDebug := THIS^;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>