<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="Strf" Id="{773d4c30-7ab5-4dfa-89f0-17661b008bb2}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Strf

]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Float" Id="{6313ef91-27c6-47ca-b08f-c89517c19315}">
      <Declaration><![CDATA[METHOD Float					: Str;
VAR_INPUT
	rValue						: ANY_REAL;	

	nTrailingZeroes				: USINT := 0;
	nLeadingZeroes				: USINT := 0;
END_VAR
VAR
	_rReal						: REAL;
	_rLReal						: LREAL;
	_sBase						: Strb;
	_nDotPos					: INT;
	_Resulteger					: Strb;
	_sFraction					: Strb;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE rValue.TypeClass OF
	__SYSTEM.TYPE_CLASS.TYPE_REAL:
		Tc2_System.MEMMOVE(ADR(_rReal), rValue.pValue, DINT_TO_UDINT(rValue.diSize));
		_rLReal := REAL_TO_LREAL(_rReal);
		
	__SYSTEM.TYPE_CLASS.TYPE_LREAL:
		Tc2_System.MEMMOVE(ADR(_rLReal), rValue.pValue, DINT_TO_UDINT(rValue.diSize));
END_CASE

_sBase.Set(LREAL_TO_STRING(_rLReal))
		.FindFirstAfter('.', 1, nStart => _nDotPos)
		.Split(_nDotPos, sLeft => _Resulteger, sRight => _sFraction);

_sFraction.Slice(1, nTrailingZeroes, sSlice => _sFraction)
				.Set(Padding(_sFraction.Read(), 0, nTrailingZeroes, '0'));
				
_Resulteger.Remove(1, _Resulteger.Length())
				.Set(Padding(_Resulteger.Read(), nLeadingZeroes, 0, '0'))
				.Append('.')
				.Append(_sFraction.Read());

Float := _Resulteger.Read();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Integer" Id="{8d46894a-f2b9-4573-b0a3-db0b76615a32}">
      <Declaration><![CDATA[METHOD Integer : Str
VAR_INPUT
	nValue			: ANY_INT;
	nLeadingZeroes	: USINT := 0;
END_VAR
VAR
	_nSigned		: LINT;
	_nUnsigned		: ULINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE nValue.TypeClass OF
	__SYSTEM.TYPE_CLASS.TYPE_SINT,
	__SYSTEM.TYPE_CLASS.TYPE_INT,
	__SYSTEM.TYPE_CLASS.TYPE_DINT,
	__SYSTEM.TYPE_CLASS.TYPE_LINT:
		Tc2_System.MEMMOVE(ADR(_nSigned), nValue.pValue, DINT_TO_UDINT(nValue.diSize));
		Integer := Padding(LINT_TO_STRING(_nSigned), nLeadingZeroes, 0, '0');
		
	__SYSTEM.TYPE_CLASS.TYPE_USINT,
	__SYSTEM.TYPE_CLASS.TYPE_UINT,
	__SYSTEM.TYPE_CLASS.TYPE_UDINT,
	__SYSTEM.TYPE_CLASS.TYPE_ULINT:	
		Tc2_System.MEMMOVE(ADR(_nUnsigned), nValue.pValue, DINT_TO_UDINT(nValue.diSize));
		Integer := Padding(ULINT_TO_STRING(_nUnsigned), nLeadingZeroes, 0, '0');
END_CASE










]]></ST>
      </Implementation>
    </Method>
    <Method Name="Padding" Id="{d4636548-f8c9-4daf-9bd4-37dd8d606d01}">
      <Declaration><![CDATA[METHOD Padding				: Str;
VAR_INPUT
	sValue					: Str;
	nLeftPadding			: USINT := 0;
	nRightPadding			: USINT := 0;
	sFillChar				: Ch	:= ' ';
END_VAR
VAR
	_sBase					: Strb;
	_sLeft					: Strb;
	_sRight					: Strb;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_sBase.Set(sValue);
IF nRightPadding = 0 THEN
	WHILE _sBase.Length() < nLeftPadding DO
		_sBase.Prepend(sFillChar);
	END_WHILE
ELSIF nLeftPadding = 0 THEN
	WHILE _sBase.Length() < nRightPadding DO
		_sBase.Append(sFillChar);
	END_WHILE
ELSE
	_sBase.Split(_sBase.Length()/2, sLeft => _sLeft, sRight => _sRight);
	WHILE _sLeft.Length() < nLeftPadding DO
		_sLeft.Prepend(sFillChar);
	END_WHILE
	WHILE _sRight.Length() < nRightPadding DO
		_sRight.Append(sFillChar);
	END_WHILE
	
	_sLeft.Append(_sRight.Read());
	_sBase.Set(_sLeft.Read());
END_IF

Padding := _sBase.Read();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SimpleTime" Id="{8b27eba7-294b-47a6-8ccb-3d73fb8b1d85}">
      <Declaration><![CDATA[METHOD SimpleTime : Str
VAR_INPUT
	tValue		: TIME;
	sMinUnit	: Str := 'MS'; //Possible options: MS, S, M, H, D
	sMaxUnit	: Str := 'S'; //Possible options: MS, S, M, H, D
END_VAR
VAR
	_nMinUnit	: USINT;
	_nMaxUnit	: USINT;
	_sValues	: ARRAY[1..5] OF Strb;
	_nValues	: ARRAY[1..5] OF UINT;
	_sUnits   	: ARRAY[1..5] OF STRING := ['MS', 'S', 'M', 'H', 'D'];
	_stTime		: Tc2_Utilities.OTSTRUCT;
	_i			: USINT;
	_strb		: Strb;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR _i := 1 TO 5 DO
	IF _sUnits[_i] = sMinUnit THEN
		_nMinUnit := _i;
	END_IF
	IF _sUnits[_i] = sMaxUnit THEN
		_nMaxUnit := _i;
	END_IF
END_FOR

IF _nMaxUnit = 0 THEN
	RETURN;
END_IF

IF _nMinUnit = 0 THEN
	RETURN;
END_IF

IF _nMinUnit > _nMaxUnit THEN
	RETURN;
END_IF

_stTime := Tc2_Utilities.TIME_TO_OTSTRUCT(tValue);
_stTime.wDay := _stTime.wWeek * 7 + _stTime.wDay;

_nValues[1] := WORD_TO_UINT(_stTime.wMilliseconds);
_nValues[2] := WORD_TO_UINT(_stTime.wSecond);
_nValues[3] := WORD_TO_UINT(_stTime.wMinute);
_nValues[4] := WORD_TO_UINT(_stTime.wHour);
_nValues[5] := WORD_TO_UINT(_stTime.wDay);

_sValues[1].Set(Strf.Integer(_nValues[1], 3)).Append('ms');
_sValues[2].Set(Strf.Integer(_nValues[2], 2)).Append('s');
_sValues[3].Set(Strf.Integer(_nValues[3], 2)).Append('m');
_sValues[4].Set(Strf.Integer(_nValues[4], 2)).Append('h');
_sValues[5].Set(Strf.Integer(_nValues[5], 3)).Append('d');

IF _nMaxUnit < 5 THEN
    FOR _i := 5 TO _nMaxUnit + 1 BY -1 DO
        IF _nValues[_i] <> 0 THEN
            _strb.Append(_sValues[_i].Read()).Append(' ');
        END_IF
    END_FOR
END_IF

FOR _i := _nMaxUnit TO _nMinUnit BY -1 DO
    _strb.Append(_sValues[_i].Read()).Append(' ');
END_FOR

SimpleTime := _strb.Read();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>