<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="Heating_PassiveCountRec" Id="{e6e3c4ff-b072-46c2-8675-2d761dfb04ed}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Heating_PassiveCountRec IMPLEMENTS I_Callable
VAR
	_ctx			: REFERENCE TO Heating_Ctx;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Call" Id="{873965da-7be8-4773-a7e5-e1826b119570}">
      <Declaration><![CDATA[METHOD Call
VAR_INPUT
	iArg				: Core.I_Arg;
END_VAR
VAR
	_iPassiveHeatingOn	: I_BoolArg;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF IsOk(ArgToIBoolArg(iArg, iVal => _iPassiveHeatingOn)) THEN
	IF _iPassiveHeatingOn.Val THEN
		IF _ctx.priv.nPassiveRooms > CST.MAX_PASSIVE_ROOM THEN
			_ctx.priv.nPassiveRooms := _ctx.priv.nPassiveRooms + 1;
		END_IF 	
	ELSE
		IF _ctx.priv.nPassiveRooms > 0 THEN
			_ctx.priv.nPassiveRooms := _ctx.priv.nPassiveRooms - 1;
		END_IF
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{bbb37f6a-2e7c-40b4-8f4a-9dbad6a3074a}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)

	ctx			: REFERENCE TO Heating_Ctx;   
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_ctx REF= ctx;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>