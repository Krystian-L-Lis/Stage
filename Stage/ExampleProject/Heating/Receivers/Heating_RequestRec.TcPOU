<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="Heating_RequestRec" Id="{f1fcf00f-bece-4c8c-95ed-661830145846}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Heating_RequestRec IMPLEMENTS I_Callable
VAR
	_ctx			: REFERENCE TO Heating_Ctx;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Call" Id="{d2f41e16-5d62-432c-8cbc-b541da0bb20b}">
      <Declaration><![CDATA[METHOD Call
VAR_INPUT
	iArg				: Core.I_Arg;
END_VAR
VAR
	_iRoom				: I_Room;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF IsOk(ArgAsIRoom(iArg, iDest => _iRoom)) THEN
	_ctx.priv.iQueue.Push(_iRoom);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{58f7fbb6-9133-4052-9821-9af265dc0ec8}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)

	ctx			: REFERENCE TO Heating_Ctx;   
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_ctx REF= ctx;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>