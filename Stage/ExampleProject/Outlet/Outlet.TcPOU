<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="Outlet" Id="{08f78f88-2f7d-4896-98eb-be94062c7e0b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Outlet IMPLEMENTS I_DomainProvider, I_Execute
VAR_INPUT
	bRequestButton	: BOOL;
END_VAR
VAR_OUTPUT
	bDrainValveOpen	: BOOL;
END_VAR
VAR CONSTANT
	MAX_STATE		: UDINT := 2;
END_VAR
VAR
	exe				: Execute(THIS^);

	// Context
	ctx				: Outlet_Ctx;

	// State Machine
	stateMachine	: StateMachine;
	stateRepo		: StateRepo<MAX_STATE>;
	stateBuffer		: StateBuffer<MAX_STATE>;
	stateMgr		: StateManager<MAX_STATE>(stateMachine, stateRepo, stateBuffer);
	A_Smgr			: A_StateManager(stateMgr, ctx.smgr);
	
	// States
	
	EStop			: Outlet_EStop(stateRepo, ctx);
	A_EStop			: A_Tag(EStop.Tag, ctx.iEStop);
	OnEStop			: Receiver(EStop);
	
	Operational		: Outlet_Operational(stateRepo, ctx);
	A_Operational	: A_Tag(Operational.Tag, ctx.iOperational);
	
	// FLAGS
	flagList		: FlagList<0>;
	
	// SIGNALS
	signalList		: SignalList<1>;
	A_SmgrChange	: A_Signal(signalList, stateMgr.GetOnChange());
	
	// RECEIVERS
	receiverList	: ReceiverList<1>;
	A_OnEStop		: A_Receiver(receiverList, OnEStop);
	
	// DOMAIN
	domTag			: Tag;
	domain			: Domain(domTag, stateMgr, flagList, signalList, receiverList);
	
	// PRIV
	bInit			: BOOL := TRUE;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="AssignTank" Id="{2b86b81f-cf6c-43cd-938d-bf9a462ab9fd}">
      <Declaration><![CDATA[METHOD AssignTank : Result
VAR_INPUT
	iTank		: I_Domain;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ctx.iIsEmpty <> 0 THEN
	AssignTank := None; // None is default, so this is not necessary!
	RETURN;
END_IF

IF iTank = 0 THEN
	AssignTank := Error;
	RETURN;
END_IF

ctx.iTank := iTank;

// Alternatively, this will carry over the error from inside the FindFlag function, 
// whereas the CASE option allows for change of error type.
(*
IF IsErr(FindFlag(iTank.Flags, 'IsEmpty', iFlag => ctx.iIsEmpty), eCarry => AssignTank) THEN
		DebugMsg(THIS^, 'Missing iIsEmpty! >');
		DebugMsg(iTank, '< Missing iIsEmpty!');
END_IF
*)

CASE FindFlag(iTank.Flags, 'IsEmpty', iFlag => ctx.iIsEmpty) OF 
	Error:
		DebugMsg(THIS^, 'Missing iIsEmpty! >');
		DebugMsg(iTank, '< Missing iIsEmpty!');
		
		AssignTank := Error;
	Ok:	
		AssignTank := Ok;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Property Name="Dom" Id="{ed950168-5698-410e-9067-d65560b45874}">
      <Declaration><![CDATA[PROPERTY Dom : I_Domain]]></Declaration>
      <Get Name="Get" Id="{44c0c90d-67f5-4ffc-8a19-1ab1b954e35c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Dom := domain;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Execute" Id="{ca2250aa-289a-487f-89bb-e08060846c74}">
      <Declaration><![CDATA[METHOD Execute
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInit THEN
	ctx.smgr.Request(ctx.iOperational);

	bInit := FALSE;
END_IF

// INPUTS
ctx.bRequestButton := bRequestButton;

// OUTPUTS
bDrainValveOpen := ctx.bDrainValveOpen;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>