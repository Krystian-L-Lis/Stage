<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="Timer" Id="{00cd285a-e79f-4593-82bd-1b987fee49e8}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Timer
VAR_INPUT
	bIn			: BOOL;
	bKeep		: BOOL;
	bPause		: BOOL;
	
	tOnDelay	: TIME;
	tOffDelay	: TIME;	
END_VAR
VAR_OUTPUT
	bOut		: BOOL;
	tElapsed	: TIME;
	tRemained	: TIME;
	tTarget		: TIME;
END_VAR
VAR
	_ton		: Tc2_Standard.TON;
	_tRemained	: TIME;
	_tElapsed	: TIME;
	_tTarget	: TIME;
	_nState		: USINT;
	
	_tOnDelayP	: TIME;
	_tOffDelayP	: TIME;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Set timer inputs based on current state
CASE _nState OF
    0: // OFF
        _ton(IN := FALSE, PT := T#0S);
        _tTarget := T#0S;
        _tElapsed := T#0S;

    1: // ON Delay
        _ton(IN := TRUE, PT := tOnDelay);
        _tTarget := tOnDelay;

    2: // ON
        _ton(IN := FALSE, PT := T#0S);
        _tTarget := T#0S;
        _tElapsed := T#0S;

    3: // OFF Delay
        _ton(IN := TRUE, PT := tOffDelay);
        _tTarget := tOffDelay;

    4: // ON Delay Paused
        _ton(IN := FALSE, PT := _tRemained);

    5: // OFF Delay Paused
        _ton(IN := FALSE, PT := _tRemained);
END_CASE

// Execute the timer
_ton();

// Update elapsed and remaining times
_tElapsed := _ton.ET;
tElapsed := _tElapsed;
tRemained := _tTarget - tElapsed;

// State transition logic
CASE _nState OF
    0: // OFF
        IF bKeep THEN
            // Remain in OFF state
        ELSIF bIn THEN
            _nState := 1; // Transition to ON Delay
        END_IF

    1: // ON Delay
        IF bPause THEN
            _tRemained := _ton.PT - _ton.ET;
            _nState := 4; // Transition to ON Delay Paused
        ELSIF _ton.Q THEN
            _nState := 2; // Transition to ON
        ELSIF bKeep THEN
            // Remain in ON Delay state
        ELSIF NOT bIn THEN
            _nState := 0; // Transition back to OFF
        END_IF

    2: // ON
        IF bKeep THEN
            // Remain in ON state
        ELSIF NOT bIn THEN
            _nState := 3; // Transition to OFF Delay
        END_IF

    3: // OFF Delay
        IF bPause THEN
            _tRemained := _ton.PT - _ton.ET;
            _nState := 5; // Transition to OFF Delay Paused
        ELSIF _ton.Q THEN
            _nState := 0; // Transition to OFF
        ELSIF bKeep THEN
            // Remain in OFF Delay state
        ELSIF bIn THEN
            _nState := 2; // Return to ON
        END_IF

    4: // ON Delay Paused
        IF NOT bPause THEN
            _nState := 1; // Return to ON Delay
            _ton.PT := _tRemained; // Restore remaining time
        ELSIF NOT bIn THEN
            _nState := 0; // Transition to OFF
        END_IF

    5: // OFF Delay Paused
        IF NOT bPause THEN
            _nState := 3; // Return to OFF Delay
            _ton.PT := _tRemained; // Restore remaining time
        ELSIF bIn THEN
            _nState := 2; // Return to ON
        END_IF
END_CASE

// Output logic
CASE _nState OF
    0, 1, 4: // OFF, ON Delay, and ON Delay Paused
        bOut := FALSE;
    2, 3, 5: // ON, OFF Delay, and OFF Delay Paused
        bOut := TRUE;
END_CASE

// Update tTarget based on state
CASE _nState OF
    0, 2:
        tTarget := T#0S;
    1, 4:
        tTarget := tOnDelay;
    3, 5:
        tTarget := tOffDelay;
END_CASE]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>