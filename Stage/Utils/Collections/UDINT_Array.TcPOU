<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="UDINT_Array" Id="{6beeae34-1876-4583-b54c-fec934e67283}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK UDINT_Array
VAR_GENERIC CONSTANT
	MI		: UDINT := 1;
	MX		: UDINT := 1;
END_VAR
VAR
	_nArray	: ARRAY[MI..MX] OF UDINT;
	_nHead	: UDINT := MI;
	_nTail	: UDINT := MI;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Get" Id="{50d45214-fc7c-468e-bc96-136d66d8d035}">
      <Declaration><![CDATA[METHOD Get : Results.Result
VAR_INPUT
	nPos		: UDINT;
END_VAR
VAR_OUTPUT
	nVal		: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF nPos < MI OR nPos > MX THEN
	Get := Results.Error;
	RETURN;
END_IF


nVal := _nArray[nPos];
Get := Results.Ok;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Has" Id="{f9cdc5dd-4001-4931-b8f7-dc63922b25cd}">
      <Declaration><![CDATA[METHOD Has : BOOL
VAR_INPUT
	nVal	: UDINT;
END_VAR
VAR
	i		: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[i := _nTail;

WHILE i <> _nHead DO
    IF _nArray[i] = nVal THEN
        Has := TRUE;
        RETURN;
    END_IF
	
    i := MI + ((i - MI + 1) MOD (MX - MI + 1));
END_WHILE

Has := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Peek" Id="{ea26ee7e-f9a4-453e-baa8-ab74eaa6d2c0}">
      <Declaration><![CDATA[METHOD Peek : Results.Result
VAR_OUTPUT
    nVal    : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _nHead = _nTail THEN
    Peek := Results.Error;
    RETURN;
END_IF

nVal := _nArray[_nTail];
Peek := Results.Ok;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Pop" Id="{9dafa2b2-c4d9-405e-ae03-7b86841e57aa}">
      <Declaration><![CDATA[METHOD Pop : Results.Result
VAR_OUTPUT
    nVal    : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _nHead = _nTail THEN
    Pop := Results.Error;
    RETURN;
END_IF

nVal := _nArray[_nTail];

_nTail := MI + ((_nTail + 1 - MI) MOD (MX - MI + 1));

Pop := Results.Ok;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Push" Id="{014e7f24-2205-43b5-a008-1708c183fb13}">
      <Declaration><![CDATA[METHOD Push : Results.Result
VAR_INPUT
    nVal    : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (_nHead + 1 - MI) MOD (MX - MI + 1) + MI = _nTail THEN
    Push := Results.Error;
    RETURN;
END_IF

_nArray[_nHead] := nVal;

_nHead := MI + ((_nHead + 1 - MI) MOD (MX - MI + 1));

Push := Results.Ok;;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{833f35c5-d562-4985-9060-e2bab2630e7b}">
      <Declaration><![CDATA[METHOD Reset
VAR
	i		: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_nHead := MI;
_nTail := MI;

FOR i := MI TO MX DO
	_nArray[i] := 0;
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Set" Id="{e272d147-4fee-4862-90da-40e1ad50f7a4}">
      <Declaration><![CDATA[METHOD Set : Results.Result
VAR_INPUT
	nPos		: UDINT;
	nVal		: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF nPos < MI OR nPos > MX THEN
	Set := Results.Error;
	RETURN;
END_IF


_nArray[nPos] := nVal;
Set := Results.Ok;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>