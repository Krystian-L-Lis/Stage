<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="Math" Id="{76db6186-827d-4be6-8551-4ecec23c6cd1}" SpecialFunc="None">
    <Declaration><![CDATA[(*Provides various mathematical functions*)
PROGRAM Math
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="ExptDecay" Id="{e059c742-3011-40a4-ba84-db0f8f8c97cf}">
      <Declaration><![CDATA[(* 
    Time-compensated smoothing coefficient. 
    Alpha = 1 - (1 - B)^dt
*)
METHOD ExptDecay : LREAL
VAR_INPUT
    rBlendFactor : LREAL;   // In [0, 1] — how fast to blend toward input
    rDeltaTime   : LREAL := 0.01;   // In seconds
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[rBlendFactor := LIMIT(0.0, rBlendFactor, 1.0);
rDeltaTime   := MAX(rDeltaTime, 0.0);
ExptDecay := LIMIT(0.0, 1.0 - EXPT(1.0 - rBlendFactor, rDeltaTime), 1.0);]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetCycleTime" Id="{dab0e14b-f490-4122-b6af-bde2aeae9a99}">
      <Declaration><![CDATA[(*
	Get task cycle time in seconds.
*)
METHOD GetCycleTime : LREAL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetCycleTime := UDINT_TO_LREAL(_TaskInfo[TC2_System.GETCURTASKINDEXEX()].CycleTime) / 10_000_000;]]></ST>
      </Implementation>
    </Method>
    <Method Name="LowPassFilter" Id="{54dd59a2-6c09-4c12-9961-65f71218b6f9}">
      <Declaration><![CDATA[(*
First-order low pass filter.
Yt = Xt * Coeff + Y(t-1) * (1- Coeff)
*)
METHOD LowPassFilter : LREAL
VAR_INPUT
	rX				: LREAL;
	rPrvY			: LREAL;
	
	rCoefficient	: LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[LowPassFilter := rX * rCoefficient + rPrvY * (1 - rCoefficient);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Normalization" Id="{37fc285e-354d-4811-9875-fb9578429fc0}">
      <Declaration><![CDATA[(*
Allows for value normalization with rescalling option.
Returns 0 when rMaxX - rMinX = 0.
*)
METHOD Normalization : LREAL
VAR_INPUT
	rX				: LREAL;
	rMinX			: LREAL;
	rMaxX			: LREAL;
	rMinY			: LREAL := 0;
	rMaxY			: LREAL := 1;
END_VAR
VAR
	_rDnmtr			: LREAL := rMaxX - rMinX;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _rDnmtr <> 0 THEN
	Normalization := rMinY + ((rX - rMinX)/_rDnmtr) * (rMaxY - rMinY);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Random" Id="{8fa98490-891b-4c1e-b9e9-80fb0f11e0b4}">
      <Declaration><![CDATA[(*
Generates random number every time is called.
*)
METHOD Random : LREAL
VAR_STAT
	_nSeed		: INT;
END_VAR
VAR
	_drand		: Tc2_System.DRAND;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_drand(Seed := _nSeed, Num => Random);
_nSeed := _nSeed + 1;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>