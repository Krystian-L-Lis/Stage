<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="ArgQueue" Id="{5fefed48-7bae-45b6-a5e2-f3473e48d477}" SpecialFunc="None">
    <Declaration><![CDATA[(*
A circular queue implementation for managing `I_Arg`.  
*)
FUNCTION_BLOCK ArgQueue
VAR_GENERIC CONSTANT
	nCap		: UDINT := 100;
END_VAR

IMPLEMENTS I_MutArgQueue

VAR
	_list		: ArgList<nCap>;
	_nLen		: UDINT := 0;
	_nHead		: UDINT := 1;
	_nTail		: UDINT := 1;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Proxy" Id="{d14fc49b-fbe4-489b-9b76-3ea6c79f6011}" />
    <Method Name="Clear" Id="{60abfa75-29d6-499a-907d-e34b56c038d1}">
      <Declaration><![CDATA[(*
Clears the queue.
*)
METHOD Clear
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_nHead := 1;
_nTail := 1;
_nLen := 0;
_list.Set(0, 1);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Head" Id="{212475c4-e8c8-4d1b-a3ee-53654d6c7959}">
      <Declaration><![CDATA[(*
Returns the current head index of the queue, indicating the next position for insertion.
*)
PROPERTY Head : UDINT]]></Declaration>
      <Get Name="Get" Id="{a9358f8b-2ada-4118-b863-513c0b85c740}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Head := _nHead;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Length" Id="{6c789f5f-1bd5-4a93-a3d4-b00289ab6031}">
      <Declaration><![CDATA[PROPERTY Length : UDINT]]></Declaration>
      <Get Name="Get" Id="{d476a79c-0af2-4a2d-a64d-2783507722fd}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Length := _nLen;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="List" Id="{7bb419a2-9a05-4640-9427-d39f30187a46}">
      <Declaration><![CDATA[(*
Provides access to the underlying list structure that holds the queue's argument objects.
*)
PROPERTY List : I_ArgList]]></Declaration>
      <Get Name="Get" Id="{a822b4ee-ebcd-431d-bee5-1b2176157c94}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[List := _list;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="MutProxy" Id="{5ece68d2-7363-424f-8f8b-111fb2eb195c}" FolderPath="Proxy\">
      <Declaration><![CDATA[(*
Allows initializing an external interface variable with an interface pointer to this instance within declaration block.
Example:
iQueue: I_MutArgQueue;
queue: ArgQueue := (MutProxy := iQueue);
Result: iQueue <> 0 
*)
PROPERTY MutProxy : REFERENCE TO I_MutArgQueue]]></Declaration>
      <Set Name="Set" Id="{678ee690-78c2-4106-8501-33a4ca26a389}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MutProxy := THIS^;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Pop" Id="{c0e476b5-0312-468c-bd79-2e025a1976a9}">
      <Declaration><![CDATA[(*
Retrieves and removes the next argument from the queue.  
Advances the tail pointer, ensuring cyclic operation within the queue's capacity.
Returns:
- Ok - Returns `I_Arg`.
- Err.NotFound - Returns null, queue empty.
- Check `I_ArgList.Get` for more results.
*)
METHOD Pop : Result
VAR_INPUT
	iOut	: REFERENCE TO I_Arg;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _nLen = 0 THEN
	Pop := Err.NotFound;
	RETURN;
END_IF;

IF IsOk(_list.Get(_nHead, iOut), nOut => Pop) THEN
	_nHead := (_nHead MOD nCap) + 1;
	_nLen := _nLen - 1;
	Pop := Ok;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Proxy" Id="{ce7b3ec4-cbe2-4590-afe8-2fe7a2476afd}" FolderPath="Proxy\">
      <Declaration><![CDATA[(*
Allows initializing an external interface variable with an interface pointer to this instance within declaration block.
Example:
iQueue: I_ArgQueue;
queue: ArgQueue := (Proxy := iQueue);
Result: iQueue <> 0 
*)
PROPERTY Proxy : REFERENCE TO I_ArgQueue]]></Declaration>
      <Set Name="Set" Id="{94c1427c-e86f-489c-8468-7e862cd122be}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Proxy := THIS^;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Push" Id="{4cffbac1-66d4-4260-a313-b7e0e1c784cf}">
      <Declaration><![CDATA[(*
Adds a new argument to the queue.  
Advances the head pointer while maintaining a cyclic structure, and returns an overflow error if the queue is full.
Returns:
- Ok - Successful insertion
- Err.Ovf - Returns null, the queue is full.
- Check `I_ArgList.Set` for more results.
*)
METHOD Push : Result
VAR_INPUT
	iIn		: I_Arg;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _nLen = nCap THEN
	Push := Err.Ovf;
	RETURN;
END_IF;

IF IsOk(_list.Set(iIn, _nTail), nOut => Push) THEN
	_nTail := (_nTail MOD nCap) + 1;
	_nLen := _nLen + 1;
	Push := Ok;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Tail" Id="{0030fa0d-2cec-40bb-9189-8d4288b9442f}">
      <Declaration><![CDATA[(*
Returns the current tail index of the queue, indicating the next position for retrieval.
*)
PROPERTY Tail : UDINT]]></Declaration>
      <Get Name="Get" Id="{09bdafc1-07ce-41b5-9418-66d1d38d8e89}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Tail := _nTail;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>