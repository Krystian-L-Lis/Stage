<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="_EcDefragment" Id="{a924f6c7-e6ef-4406-aeaa-0bab42ee8da3}" SpecialFunc="None">
    <Declaration><![CDATA[// ---------------------------------------------------------------------------
// FUNCTION:  _EcCoalesce
// PURPOSE:   Compacts (coalesces) all occupied blocks in _Ec.comp[] to the
//            left, removing any gaps between them. Updates each entity's
//            _Start and _End accordingly, zeroes out remaining slots,
//            and reassigns _Ec.iFirst to the new leftmost entity, if any.
// ---------------------------------------------------------------------------
FUNCTION INTERNAL _EcDefragment : Result
VAR_INPUT
	iLastEntity		: I_EntityNode := 0;
END_VAR
VAR
	i				: UDINT;
   _temp			: ARRAY[1..Param.COMP_CAP] OF _EcStruct;
   _iSwappedEntity	: I_EntityNode;
   _nNextCopyId		: UDINT := 1;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// 1) If we are at maximum capacity (all slots are allocated).
IF _Ec.nCompLen = Param.COMP_CAP THEN
    _EcDefragment := Err.Ovf;
    RETURN;
END_IF

// 2) If there are no allocated slots at all, nothing to defragment.
IF _Ec.nCompLen = 0 THEN
    _EcDefragment := Ok;
    RETURN;
END_IF

// 3) We want to ensure that entity that requires more space will get it, so we move it temporarly to the end.
IF iLastEntity <> 0 THEN
	_iSwappedEntity := _Ec.iEntity[_Ec.nEntityLen];
	_Ec.iEntity[iLastEntity.Id] := _iSwappedEntity;
	_Ec.iEntity[_Ec.nEntityLen] := iLastEntity;
END_IF

// 3) Copy all chunks to the temporary table
FOR i := 1 TO _Ec.nEntityLen DO
	IF _Ec.iEntity[i]._Start <> 0 THEN
		Tc2_SYSTEM.MEMCPY(
							ADR(_temp[_nNextCopyId]),
							ADR(_Ec.comp[_Ec.iEntity[i]._Start]),
							SIZEOF(_EcStruct) * _Ec.iEntity[i].Size
						);
		_Ec.iEntity[i]._Start := _nNextCopyId;
		_nNextCopyId := _Ec.iEntity[i].Size + _nNextCopyId;
		_Ec.iEntity[i]._End := _nNextCopyId - 1;	
	END_IF
END_FOR

// 3) Move back the swapped entities, to preserve the Ids.
IF iLastEntity <> 0 THEN
	_Ec.iEntity[_iSwappedEntity.Id] := _iSwappedEntity;
	_Ec.iEntity[iLastEntity.Id] := iLastEntity;
END_IF

// 4) Copy temporary table onto the _Ec.comp table
Tc2_System.MEMCPY(
	ADR(_Ec.comp),
	ADR(_temp),
	SIZEOF(_EcStruct) * _Ec.nCompLen
);

// 5) Clear the remainging area
Tc2_System.MEMSET(
	ADR(_Ec.comp[_Ec.nCompLen + 1]),
	0,
	SIZEOF(_EcStruct) * (Param.COMP_CAP - _Ec.nCompLen)
);

// 6) First entry in _Ec.comp should always be iFirst
CASE _Ec.comp[1].nType OF
	1:
		_Ec.iFirst := _Ec.comp[1].variant.iEntity;
		_EcDefragment := Ok;
	ELSE
		_EcDefragment := Err.Udf;
END_CASE

]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>