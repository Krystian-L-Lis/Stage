<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <Itf Name="I_Strb" Id="{ba21f907-2947-410b-a5fe-d31c0fb60621}">
    <Declaration><![CDATA[// A string builder utility that allows for manipulation of a string up to 255 characters. It implements the I_Strb interface that allows for method chaining.
INTERFACE INTERNAL I_Strb
]]></Declaration>
    <Method Name="Append" Id="{248d4e6a-1d63-4a88-a9ff-6f22af843738}">
      <Declaration><![CDATA[// Appends the specified string to the current string.
// Truncates if the total length exceeds 255 characters.
METHOD Append : I_Strb
VAR_INPUT
    sToAdd : Str; // String to append
END_VAR
]]></Declaration>
    </Method>
    <Method Name="FindFirstAfter" Id="{cbb45280-4d0a-46e0-9518-44d206a10b65}">
      <Declaration><![CDATA[// Finds the first occurrence of a substring after the specified position.
// Outputs the start and end positions of the found substring.
METHOD FindFirstAfter : I_Strb
VAR_INPUT
    sToFind : Str;      // Substring to find
    nPosition : INT := 1; // Starting position for search
END_VAR
VAR_OUTPUT
    nStart : INT;       // Start position of the found substring
    nEnd : INT;         // End position of the found substring
END_VAR
]]></Declaration>
    </Method>
    <Method Name="FindLastBefore" Id="{4605251b-2100-457a-9572-22dbfde23e5d}">
      <Declaration><![CDATA[// Finds the last occurrence of a substring before the specified position.
// Outputs the start and end positions of the found substring.
METHOD FindLastBefore : I_Strb
VAR_INPUT
    sToFind : Str;        // Substring to find
    nPosition : INT := 256; // Starting position for reverse search
END_VAR
VAR_OUTPUT
    nStart : INT;         // Start position of the found substring
    nEnd : INT;           // End position of the found substring
END_VAR
]]></Declaration>
    </Method>
    <Method Name="HasAfter" Id="{f6606593-96a5-466f-bbd2-567dc49ba5e1}">
      <Declaration><![CDATA[// Checks if the specified substring exists after the given position.
METHOD HasAfter : BOOL
VAR_INPUT
    sToFind : Str;      // Substring to search for
    nPosition : INT := 0; // Starting position for search
END_VAR
VAR_OUTPUT
    nStart : INT;       // Start position of the found substring
    nEnd : INT;         // End position of the found substring
END_VAR
]]></Declaration>
    </Method>
    <Method Name="HasBefore" Id="{3ba32025-a527-449a-a307-df9b66ed9eda}">
      <Declaration><![CDATA[// Checks if the specified substring exists before the given position.
METHOD HasBefore : BOOL
VAR_INPUT
    sToFind : Str;        // Substring to search for
    nPosition : INT := 256; // Ending position for reverse search
END_VAR
VAR_OUTPUT
    nStart : INT;         // Start position of the found substring
    nEnd : INT;           // End position of the found substring
END_VAR
]]></Declaration>
    </Method>
    <Method Name="Inject" Id="{42b4e730-2675-4489-9fe4-217e8e7d42d0}">
      <Declaration><![CDATA[// Inserts a specified substring at a given position.
// Truncates if the total length exceeds 255 characters.
METHOD Inject : I_Strb
VAR_INPUT
    nPosition : INT;    // Position to inject the string
    sToInject : Str;    // String to inject
END_VAR
]]></Declaration>
    </Method>
    <Method Name="IsEmpty" Id="{7ec358e7-cfb6-46dd-b47f-afbb755de3fa}">
      <Declaration><![CDATA[// Checks if the current string is empty.
METHOD IsEmpty : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
    </Method>
    <Method Name="Length" Id="{e00aeb63-f167-4f31-942d-bc8a0b296d6c}">
      <Declaration><![CDATA[// Returns the current length of the string.
METHOD Length : INT
VAR_INPUT
END_VAR
]]></Declaration>
    </Method>
    <Method Name="Prepend" Id="{5bc04033-c6a6-47d8-8c78-bbe521b9bc45}">
      <Declaration><![CDATA[// Prepends the specified string to the current string.
// Truncates if the total length exceeds 255 characters.
METHOD Prepend : I_Strb
VAR_INPUT
    sToAdd : Str; // String to prepend
END_VAR
]]></Declaration>
    </Method>
    <Method Name="Read" Id="{b4c48c9b-9942-42d6-a0c3-ad72a73e80c9}">
      <Declaration><![CDATA[// Returns the current string value.
METHOD Read : Str
VAR_INPUT
END_VAR
]]></Declaration>
    </Method>
    <Method Name="Remove" Id="{38c87d18-4637-4049-b384-460f530c2152}">
      <Declaration><![CDATA[// Removes a substring of specified length starting at a given position.
METHOD Remove : I_Strb
VAR_INPUT
    nLength : INT;    // Length of the substring to remove
    nPosition : INT;  // Starting position of the substring to remove
END_VAR
]]></Declaration>
    </Method>
    <Method Name="Set" Id="{cde054de-26e3-4022-b4ee-a7751f8859aa}">
      <Declaration><![CDATA[// Sets the current string to a new value.
METHOD Set : I_Strb
VAR_INPUT
    sLiteral : Str; // New string value
END_VAR
]]></Declaration>
    </Method>
    <Method Name="Slice" Id="{c5d2cbbd-cd3e-4818-966c-244420d51bcb}">
      <Declaration><![CDATA[// Extracts a substring starting from a given position with a specified length.
METHOD Slice : I_Strb
VAR_INPUT
	nLength : INT;   // Length of the slice
    nPosition : INT; // Starting position of the slice
END_VAR
VAR_OUTPUT
    sSlice : Strb;   // The sliced string
END_VAR
]]></Declaration>
    </Method>
    <Method Name="Split" Id="{827c2322-1e1a-4752-891a-627fe8cdc2d1}">
      <Declaration><![CDATA[// Splits the string into two parts at the specified position.
METHOD Split : I_Strb
VAR_INPUT
    nPosition : INT; // Position to split the string
END_VAR
VAR_OUTPUT
    sLeft : Strb;    // Left part of the split
    sRight : Strb;   // Right part of the split
END_VAR
]]></Declaration>
    </Method>
  </Itf>
</TcPlcObject>