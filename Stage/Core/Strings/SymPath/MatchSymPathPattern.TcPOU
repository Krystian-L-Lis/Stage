<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="MatchSymPathPattern" Id="{d88b0b61-1f65-4468-bff7-7ead93691118}" SpecialFunc="None">
    <Declaration><![CDATA[(*
Compares a symbolic path **sAddress** against a pattern **sPattern** to determine if they match.
Supports wildcard '*' TO match ANY number OF segments, including zero.
Example patterns:
*.abc.def  -> Matches ANY path ending with ".abc.def"
abc.*.xyz -> Matches ANY path where ANY number OF segments exist between "abc" AND "xyz"
*          -> Matches ANY path
*)
FUNCTION MatchSymPathPattern : Result
VAR_INPUT
    sAddress : Str;  /// The symbolic path to evaluate
    sPattern : Str;  /// The pattern to match against
END_VAR
VAR
	pttPath				: SymPath;
	pttSeg				: Str;
	pttPeek				: Str;
	addPath				: SymPath;
	addSeg				: Str;
	bMatch				: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Init
IF IsErr(addPath.Set(sAddress)) THEN
	RETURN;
END_IF
IF IsErr(pttPath.Set(sPattern)) THEN
	RETURN;
END_IF

// Advance to the next segment
WHILE IsOk(pttPath.Next(sSeg => pttSeg)) DO	
	bMatch := FALSE;
	// If the current segment is a wildcard, then peek to the next segment
	IF pttSeg = '*' THEN
		IF IsOk(pttPath.Peek(sSeg => pttPeek)) THEN
			IF pttPeek = '*' THEN
				CONTINUE; // Skip redundant wildcard if *.*.
			END_IF
		ELSE
			MatchSymPathPattern := Ok;
			RETURN; // No more segments in the pattern, so it's a match as everything so far matched(.*)
		END_IF

	// If current segment is not a wildcard reset the peek.
	ELSIF pttSeg <> '*' THEN
		pttPeek := '';
	END_IF
	
	// Get the next segment of the address path
	WHILE IsOk(addPath.Next(sSeg => addSeg)) DO
		IF pttPeek <> '' THEN
			IF pttPeek = addSeg THEN
				bMatch := TRUE;
				pttPath.Next(); // Consume get next pattern segment
				EXIT;
			ELSE
				CONTINUE; // Get next address
			END_IF
		ELSIF pttSeg = addSeg THEN
			bMatch := TRUE;
			EXIT; // Consume get next pattern segment
		ELSE
			RETURN; // No match - return
		END_IF
	END_WHILE

	IF NOT bMatch THEN
		RETURN;
	END_IF

END_WHILE

IF IsOk(addPath.Peek()) THEN
	RETURN;
END_IF

MatchSymPathPattern := Ok;


]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>