<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="Strf" Id="{1997d8f8-a3a3-412e-a9d9-e47c6d4dafb7}" SpecialFunc="None">
    <Declaration><![CDATA[// The Strf provides utilities for string formatting.
PROGRAM Strf

]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Padding" Id="{7d05623e-05a9-49ee-b8ca-0efb8661641b}">
      <Declaration><![CDATA[// Adds left and/or right padding to a string with a specified fill character.
// Returns the padded string.
METHOD Padding : Str
VAR_INPUT
    sValue       : Str;  // The original string
    nLeftPadding : USINT := 0; // Number of padding characters to add to the left
    nRightPadding: USINT := 0; // Number of padding characters to add to the right
    sFillChar    : Ch := ' ';  // Character used for padding
END_VAR
VAR
	_sBase					: Strb;
	_sLeft					: Strb;
	_sRight					: Strb;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_sBase.Set(sValue);
IF nRightPadding = 0 THEN
	WHILE _sBase.Length() < nLeftPadding DO
		_sBase.Prepend(sFillChar);
	END_WHILE
ELSIF nLeftPadding = 0 THEN
	WHILE _sBase.Length() < nRightPadding DO
		_sBase.Append(sFillChar);
	END_WHILE
ELSE
	_sBase.Split(_sBase.Length()/2, sLeft => _sLeft, sRight => _sRight);
	WHILE _sLeft.Length() < nLeftPadding DO
		_sLeft.Prepend(sFillChar);
	END_WHILE
	WHILE _sRight.Length() < nRightPadding DO
		_sRight.Append(sFillChar);
	END_WHILE
	
	_sLeft.Append(_sRight.Read());
	_sBase.Set(_sLeft.Read());
END_IF

Padding := _sBase.Read();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SimpleTime" Id="{2c25983c-5b99-43fa-a5a9-faa93b5102ab}">
      <Declaration><![CDATA[// Converts a TIME value to a human-readable string with specified minimum and maximum units.
// Returns the formatted time string.
METHOD SimpleTime : Str
VAR_INPUT
    tValue   : TIME;  // Time value to convert
    sMinUnit : Str := 'MS'; // Minimum unit (e.g., MS, S, M, H, D)
    sMaxUnit : Str := 'S';  // Maximum unit (e.g., MS, S, M, H, D)
END_VAR
VAR
	_nMinUnit	: USINT;
	_nMaxUnit	: USINT;
	_sValues	: ARRAY[1..5] OF Strb;
	_nValues	: ARRAY[1..5] OF UINT;
	_sUnits   	: ARRAY[1..5] OF STRING := ['MS', 'S', 'M', 'H', 'D'];
	_stTime		: Tc2_Utilities.OTSTRUCT;
	_i			: USINT;
	_strb		: Strb;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR _i := 1 TO 5 DO
	IF _sUnits[_i] = sMinUnit THEN
		_nMinUnit := _i;
	END_IF
	IF _sUnits[_i] = sMaxUnit THEN
		_nMaxUnit := _i;
	END_IF
END_FOR

IF _nMaxUnit = 0 THEN
	RETURN;
END_IF

IF _nMinUnit = 0 THEN
	RETURN;
END_IF

IF _nMinUnit > _nMaxUnit THEN
	RETURN;
END_IF

_stTime := Tc2_Utilities.TIME_TO_OTSTRUCT(tValue);
_stTime.wDay := _stTime.wWeek * 7 + _stTime.wDay;

_nValues[1] := WORD_TO_UINT(_stTime.wMilliseconds);
_nValues[2] := WORD_TO_UINT(_stTime.wSecond);
_nValues[3] := WORD_TO_UINT(_stTime.wMinute);
_nValues[4] := WORD_TO_UINT(_stTime.wHour);
_nValues[5] := WORD_TO_UINT(_stTime.wDay);

_sValues[1].Set(Strf.Padding(UINT_TO_STRING(_nValues[1]), 3, 0, '0')).Append('ms');
_sValues[2].Set(Strf.Padding(UINT_TO_STRING(_nValues[2]), 2, 0, '0')).Append('s');
_sValues[3].Set(Strf.Padding(UINT_TO_STRING(_nValues[3]), 2, 0, '0')).Append('m');
_sValues[4].Set(Strf.Padding(UINT_TO_STRING(_nValues[4]), 2, 0, '0')).Append('h');
_sValues[5].Set(Strf.Padding(UINT_TO_STRING(_nValues[5]), 3, 0, '0')).Append('d');

IF _nMaxUnit < 5 THEN
    FOR _i := 5 TO _nMaxUnit + 1 BY -1 DO
        IF _nValues[_i] <> 0 THEN
            _strb.Append(_sValues[_i].Read()).Append(' ');
        END_IF
    END_FOR
END_IF

FOR _i := _nMaxUnit TO _nMinUnit BY -1 DO
    _strb.Append(_sValues[_i].Read()).Append(' ');
END_FOR

SimpleTime := _strb.Read();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>