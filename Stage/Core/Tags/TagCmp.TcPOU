<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="TagCmp" Id="{fc472a51-95c8-4c63-b8c5-5dfa13d61d73}" SpecialFunc="None">
    <Declaration><![CDATA[(*
A tool for performing CASE OF-like evaluations on `I_Tag`.  
It enables sequential evaluation of conditions and stops when `IsTrue`, `IsFalse`, or `IsErr` methods are invoked.
Allows method chaining.
*)
FUNCTION_BLOCK FINAL TagCmp IMPLEMENTS I_TagCmp
VAR
	_iBaseTag		: I_Tag;
	_nResult		: Result;
	_bLock			: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="_self" Id="{fe4340bb-7f6f-44d0-993a-3f0ac0014f79}">
      <Declaration><![CDATA[PROPERTY PRIVATE _self : I_TagCmp]]></Declaration>
      <Get Name="Get" Id="{e6bce7a1-dcf6-45e3-9283-e9e637ba0ada}">
        <Declaration><![CDATA[VAR
	_this : I_TagCmp := THIS^;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_self := _this;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="AndHasOption" Id="{0c6bde1e-a6f3-4a1d-a084-0540f59c88b8}">
      <Declaration><![CDATA[(*
Updates its internal state based on the internal status and option.  
Sets the state to `Ok` if the base tag is `Ok` and has the specified Option; otherwise, sets the state to `None`.
*)
METHOD AndHasOption : I_TagCmp

VAR_INPUT
	sOption		: Str;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AndHasOption := _self;
sOption := Tc2_Utilities.F_ToLCase(sOption);

IF _bLock THEN
	RETURN;
END_IF

IF _nResult = Ok AND _iBaseTag.Option = sOption THEN
	_nResult := Ok;
ELSE
	_nResult := None;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="AndIf" Id="{9223b46b-6be4-477a-9010-c0212fbeba73}">
      <Declaration><![CDATA[(*
Updates its internal state based on the internal status and an external condition.  
Sets the state to `Ok` if the base tag is `Ok` and the external condition is TRUE; otherwise, sets the state to `None`.
*)
METHOD AndIf : I_TagCmp
VAR_INPUT
	bCondition: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AndIf := _self;

IF _bLock THEN
	RETURN;
END_IF

IF _nResult = Ok AND_THEN bCondition THEN
	_nResult := Ok;
ELSE
	_nResult := None;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="HasOption" Id="{c463345a-f124-40d6-b1f7-85e8eeaaf583}">
      <Declaration><![CDATA[(*
Updates its internal state based on the internal status and option.  
Sets the state to `Ok` if the base tag has the specified Option.
*)
METHOD HasOption : I_TagCmp
VAR_INPUT
	sOption		: Str;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[HasOption := _self;
sOption := Tc2_Utilities.F_ToLCase(sOption);

IF _bLock THEN
	RETURN;
END_IF

CASE _nResult OF
	Ok,
	None:
		IF sOption <> '' AND_THEN _iBaseTag.Option = sOption THEN
			_nResult := Ok;
		END_IF
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsErr" Id="{14d0ac82-4c6f-4a57-b4ca-eba180427823}">
      <Declaration><![CDATA[(*
Returns `TRUE` if any evaluated conditions resulted in `Error`.  
Halts further evaluations by locking the current state.
*)
METHOD IsErr : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _bLock THEN
	RETURN;
END_IF

IF _nResult >= 0 THEN
	RETURN;
END_IF

_bLock := TRUE;
IsErr := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsFalse" Id="{566b0e42-90e9-4763-a3ef-8beae73b4f17}">
      <Declaration><![CDATA[(*
Returns `TRUE` if all evaluated conditions resulted in `FALSE`.  
Halts further evaluations by locking the current state.
*)
METHOD IsFalse : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _bLock THEN
	RETURN;
END_IF

IF _nResult <> None THEN
	RETURN;
END_IF

_bLock := TRUE;
IsFalse := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsTrue" Id="{64a37775-e1d6-4f7b-8097-2497600df346}">
      <Declaration><![CDATA[(*
Returns `TRUE` if any evaluated condition resulted in `TRUE`.  
Halts further evaluations by locking the current state.
*)
METHOD IsTrue : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _bLock THEN
	RETURN;
END_IF

IF _nResult <> Ok THEN
	RETURN;
END_IF

_bLock := TRUE;
IsTrue := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Match" Id="{5c938a28-c260-4bf1-adcc-c84d59421fa8}">
      <Declaration><![CDATA[(*
Updates its internal state based on the internal status and external I_Tag.  
Sets the state to `Ok` if the base tag matches the external tag.
*)
METHOD Match : I_TagCmp
VAR_INPUT
	iOther: I_Tag;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Match := _self;

IF _bLock THEN
	RETURN;
END_IF

CASE _nResult OF
	Ok,
	None:
		IF iOther = _iBaseTag THEN
			_nResult := Ok;
		END_IF
END_CASE

	]]></ST>
      </Implementation>
    </Method>
    <Method Name="MatchId" Id="{78d82c00-f656-4a95-b467-0eabd905f45b}">
      <Declaration><![CDATA[(*
Updates its internal state based on the internal status and a string value.  
Sets the state to `Ok` if the base tag Id matches the provided string from right to left.
*)
METHOD MatchId : I_TagCmp
VAR_INPUT
	sIdToMatch		: Str;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[MatchId := _self;
sIdToMatch := Tc2_Utilities.F_ToLCase(sIdToMatch);

IF _bLock THEN
	RETURN;
END_IF

CASE _nResult OF
	Ok,
	None:
		IF sIdToMatch <> '' AND_THEN (Tc2_Standard.RIGHT(_iBaseTag.Id, Tc2_Standard.LEN(sIdToMatch)) = sIdToMatch) THEN
			_nResult := Ok;
		END_IF
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="MatchWcdId" Id="{155a5479-46da-4d47-bd5a-a8dff579e9de}">
      <Declaration><![CDATA[(*
Updates its internal state based on the internal status and a string value.  
Sets the state to `Ok` if the base tag Id matches the provided string pattern.
Allows wildcards.
*)
METHOD MatchWcdId : I_TagCmp
VAR_INPUT
	sPattern 			: Str;
END_VAR
VAR
	pttPath				: TagPath;
	pttSeg				: Str;
	pttPeek				: Str;
	addPath				: TagPath;
	addSeg				: Str;
	bMatch				: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[MatchWcdId := _self;

// Check lock
IF _bLock THEN
	RETURN;
END_IF

// Check result state
CASE _nResult OF
	Ok,
	None:		
		_nResult := MatchTagPathPattern(_iBaseTag.Id, sPattern);
END_CASE

]]></ST>
      </Implementation>
    </Method>
    <Method Name="OrIf" Id="{c9bdb97c-3eb5-4133-8ad4-a1531337cf33}">
      <Declaration><![CDATA[(*
Updates its internal state based on the internal status and an external condition.  
Sets the state to `Ok` if the base tag is `Ok` or the external condition is TRUE.
*)
METHOD OrIf : I_TagCmp
VAR_INPUT
	bCondition: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[OrIf := _self;

IF _bLock THEN
	RETURN;
END_IF

IF _nResult = Ok OR_ELSE bCondition THEN
	_nResult := Ok;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Set" Id="{2167daab-4164-44b9-93b7-a85c88a05ebd}">
      <Declaration><![CDATA[(*
Sets a new base tag for comparison and resets the result and lock states.
Fails if `iBaseTag` is `0`;
*)
METHOD Set : I_TagCmp
VAR_INPUT
	iBaseTag	: I_Tag;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_iBaseTag := iBaseTag;
_nResult := None;
_bLock := FALSE;

IF iBaseTag = 0 THEN
	_nResult := Err.Itf0;
END_IF

Set := _self;]]></ST>
      </Implementation>
    </Method>
    <Method Name="XorIf" Id="{ca9c46ad-c94a-433e-aeab-483b4c5ea474}">
      <Declaration><![CDATA[(*
Updates its internal state based on the internal status and an external condition.  
Sets the state to `Ok` if the base tag is `Ok` xor the external condition is TRUE.
*)
METHOD XorIf : I_TagCmp
VAR_INPUT
	bCondition: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[XorIf := _self;

IF _bLock THEN
	RETURN;
END_IF

IF _nResult = Ok XOR bCondition THEN
	_nResult := Ok;
END_IF
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>