<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="Receiver" Id="{09249f88-9a26-4648-82ad-ef06a2e8297b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FINAL Receiver IMPLEMENTS I_ReceiverNode, I_Receiver
VAR
	_iCallable		: I_Callable;
	_tag			: Tag('');
	_bIsOk			: BOOL := TRUE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{180c7f71-8e66-475d-822f-48b13e0266b6}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)

	iCallable	: I_Callable;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_iCallable := iCallable;
IF _iCallable = 0 THEN
	_bIsOk := FALSE;
	DebugMsg(THIS^, 'iReceiver = 0!');
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="IsOk" Id="{f1f087c9-ce24-4a7a-9d2f-520cd51dc062}">
      <Declaration><![CDATA[PROPERTY INTERNAL IsOk : BOOL]]></Declaration>
      <Get Name="Get" Id="{01cfd46c-ea36-47ad-88cc-581ac680254f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsOk := _bIsOk;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Pair" Id="{6fffc843-9230-4d39-885d-576d2d6aa59f}">
      <Declaration><![CDATA[METHOD Pair : Result
VAR_INPUT
	iSignal		: I_Signal;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iSignal <> 0 THEN
	Pair := iSignal.Pair(THIS^);
ELSE
	Pair := Error;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Receive" Id="{7cf97b80-2026-43ed-bd4a-a4b08dba024b}">
      <Declaration><![CDATA[METHOD INTERNAL Receive
VAR_INPUT
	iArg			: I_Arg;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_iCallable.Call(iArg);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Tag" Id="{c4ff52e5-e8db-4834-b8d3-e55ed4dc8f91}">
      <Declaration><![CDATA[PROPERTY Tag : I_Tag]]></Declaration>
      <Get Name="Get" Id="{78444fd4-17bd-40e5-bca6-e460c617c742}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Tag := _tag;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Unpair" Id="{9cdd6e18-8337-45bf-81f7-8c24c8d9cdfa}">
      <Declaration><![CDATA[METHOD Unpair : Result
VAR_INPUT
	iSignal		: I_Signal;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iSignal <> 0 THEN
	Unpair := iSignal.Unpair(THIS^);
ELSE
	Unpair := Error;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>