<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="Signal" Id="{f8e18ed7-1c52-42fc-a059-fb597dcc2816}" SpecialFunc="None">
    <Declaration><![CDATA[(*
Represents a signal node within the Broadcast system.  
Enables the emission of events and supports pairing with receivers.
*)
FUNCTION_BLOCK FINAL Signal IMPLEMENTS I_SignalNode, I_Signal, I_SignalEmit
VAR
	_comp			: Component(THIS^);
	_tag			: TagBase;	
	_nId			: UDINT;
	_nStart			: UDINT;
	_nEnd			: UDINT;
	_nSize			: UDINT;
	_bIsLocked		: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Node" Id="{67b0e520-34fd-49c8-b1ba-61fc8c99d4e5}" />
    <Property Name="_End" Id="{747f76e2-80c1-4fe7-ac12-36b51ee62f7b}" FolderPath="Node\">
      <Declaration><![CDATA[PROPERTY INTERNAL _End : UDINT
]]></Declaration>
      <Get Name="Get" Id="{af4b6446-a198-46ee-956f-22c2e9ff3508}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_End := _nEnd;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{18d5f4fe-e62e-4a04-9c83-538c70681da2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_nEnd := _End;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="_Id" Id="{68b651c3-b5d7-4533-b91f-63c64b0d192e}" FolderPath="Node\">
      <Declaration><![CDATA[PROPERTY INTERNAL _Id : UDINT]]></Declaration>
      <Get Name="Get" Id="{adac0f9e-5947-479e-be4b-8ea2d4f00b90}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Id := _nId;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="_Size" Id="{0a91cfac-93c7-4387-861b-eadaf8ca6b39}" FolderPath="Node\">
      <Declaration><![CDATA[PROPERTY INTERNAL _Size : UDINT
]]></Declaration>
      <Get Name="Get" Id="{a478b757-5e32-4c1d-b6de-43374fb4317b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Size := _nSize;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{21b4b107-67e7-4639-a795-cc4753c3293e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_nSize := _Size;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="_Start" Id="{337b25f3-a662-46cb-a639-924df6db33a7}" FolderPath="Node\">
      <Declaration><![CDATA[PROPERTY INTERNAL _Start : UDINT
]]></Declaration>
      <Get Name="Get" Id="{7b2bfffc-a197-41af-aa40-1c4075cd6ea1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Start := _nStart;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{5726210a-4f73-428b-a697-77cd8dcfa82c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_nStart := _Start;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Emit" Id="{4ad2ae5f-8061-46ee-9938-a79c2993fbad}">
      <Declaration><![CDATA[(*
Emits an argument through the signal's broadcasting system.  
If no argument is provided, it defaults to emitting the associated tag.
Returns:
- Ok - On Success
- Err.InfLoop - Upon recursive call attempt
*)
METHOD Emit : Result
VAR_INPUT
	iArg			: I_Arg := 0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _bIsLocked THEN
	Emit := Err.InfLoop;
	RETURN;
END_IF

IF iArg = 0 THEN
	iArg := _tag;
END_IF

_bIsLocked := TRUE;
_Emit(THIS^, iArg);
_bIsLocked := FALSE;

Emit := Ok;]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitTo" Id="{01237bb5-eb33-4f6f-8303-4496429927bb}">
      <Declaration><![CDATA[(*
Emits an argument to a specified receiver.
Returns:
- `Ok` - If the emission is successful.
- `Err.Itf0` - If the receiver interface is invalid.
- `Err.InfLoop` - Upon recursive call attempt
*)
METHOD EmitTo : Result
VAR_INPUT
	iReceiver		: I_Receiver;
	iArg			: I_Arg := 0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iReceiver = 0 THEN
	EmitTo := Err.Itf0;
	RETURN;
END_IF

IF _bIsLocked THEN
	EmitTo := Err.InfLoop;
	RETURN;
END_IF

IF iArg = 0 THEN
	iArg := _tag;
END_IF

_bIsLocked := TRUE;
iReceiver.Receive(iArg);
_bIsLocked := FALSE;

EmitTo := Ok;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{ce47a828-df52-4ce9-b420-965840dc0bdc}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)   
END_VAR
VAR
	_r	: Result;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE (_r := _RegSignal(THIS^, nIndex => _nId)) OF
	Ok:
		// Ignore
	Err.Ovf:
		DebugMsg(THIS^, '_Broadcast.iSignal table overflow!');
	ELSE
		DebugMsg(THIS^, TC2_Standard.CONCAT('_RefSignal(I_Signal): unknown error! Error code: ', TO_STRING(_r)));
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Option" Id="{1843f7ed-dc01-49ec-bf6f-06b77ee6ae5f}">
      <Declaration><![CDATA[(*
Sets an Tag.Option property of an internal Tag. Chainable.
*)
METHOD Option : REFERENCE TO Signal
VAR_INPUT
	sOption		: Str;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Option REF= THIS^;
_tag.Option := sOption;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Pair" Id="{ffac2203-3a22-4d2d-be13-7d02d87566af}">
      <Declaration><![CDATA[(*
Pairs the signal with a receiver.  
Returns:
- `Ok` - If pairing is successful.
- `Err.Itf0` - If the receiver interface is invalid.
- `Err.IncArg` - If the `I_Receiver` is invalid.
- `Err.ItfEq` - If the `I_Receiver` is already paired with this `I_Signal`.
- `Err.Ovf` - If there is no space for another pairing.
*)
METHOD Pair : Result
VAR_INPUT
	iReceiver		: I_Receiver;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iReceiver = 0 THEN
	Pair := Err.Itf0;
ELSIF iReceiver.IsOk THEN
	Pair := _Pair(THIS^, iReceiver);
ELSE
	Pair := Err.IncArg;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Property Name="Proxy" Id="{41b74fc0-6e2d-470c-acdc-692ecfebdb94}">
      <Declaration><![CDATA[PROPERTY Proxy : REFERENCE TO I_SignalEmit]]></Declaration>
      <Set Name="Set" Id="{4d0fe8ef-d2dc-4e1b-a297-50eb6dfde675}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Proxy := THIS^;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Tag" Id="{276c9dc2-e1f1-4c44-b5b0-4b2a0ec67ff8}">
      <Declaration><![CDATA[(*
Provides access to the tag associated with the signal.
*)
PROPERTY Tag : I_Tag]]></Declaration>
      <Get Name="Get" Id="{75779fa8-33cd-4bad-ac20-5c8ee6db9799}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Tag := _tag;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Unpair" Id="{c5a28d3d-8210-4c9d-a125-1a6761d00d0d}">
      <Declaration><![CDATA[(*
Unpairs the signal from a specified receiver.
Returns:
- `Ok` - If unpairing is successful.
- `Err.Itf0` - If the receiver interface is invalid.
- `Err.IncArg` - If the `I_Receiver` is invalid.
- `Err.NoMatch` - If `I_Signal` is not paired with this `I_Receiver`.
*)
METHOD Unpair : Result
VAR_INPUT
	iReceiver		: I_Receiver;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iReceiver = 0 THEN
	Unpair := Err.Itf0;
ELSIF iReceiver.IsOk THEN
	Unpair := _Unpair(THIS^, iReceiver);
ELSE
	Unpair := Err.IncArg;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>